/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.11
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGPHP

#define SWIG_PREFIX ""
#define SWIG_PREFIX_LEN 0

#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast(r) (r)
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCmp(const char *nb, const char *tb) {
  int equiv = 1;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (equiv != 0 && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = SWIG_TypeNameComp(nb, ne, tb, te);
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  return SWIG_TypeCmp(nb, tb) == 0 ? 1 : 0;
}

/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * phprun.swg
 *
 * PHP runtime library
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif
#include "zend.h"
#include "zend_API.h"
#include "zend_exceptions.h"
#include "php.h"
#include "ext/standard/php_string.h"
#include <stdlib.h> /* for abort(), used in generated code. */

#ifdef ZEND_RAW_FENTRY
/* ZEND_RAW_FENTRY was added somewhere between 5.2.0 and 5.2.3 */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_RAW_FENTRY((char*)#ZN, N, A, 0)
#else
/* This causes warnings from GCC >= 4.2 (assigning a string literal to char*).
 * But this seems to be unavoidable without directly assuming knowledge of
 * the structure, which changed between PHP4 and PHP5. */
# define SWIG_ZEND_NAMED_FE(ZN, N, A) ZEND_NAMED_FE(ZN, N, A)
#endif

#ifndef Z_SET_ISREF_P
/* For PHP < 5.3 */
# define Z_SET_ISREF_P(z) (z)->is_ref = 1
#endif
#ifndef Z_SET_REFCOUNT_P
/* For PHP < 5.3 */
# define Z_SET_REFCOUNT_P(z, rc) (z)->refcount = (rc)
#endif

#define SWIG_LONG_CONSTANT(N, V) zend_register_long_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_DOUBLE_CONSTANT(N, V) zend_register_double_constant((char*)#N, sizeof(#N), V, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_STRING_CONSTANT(N, V) zend_register_stringl_constant((char*)#N, sizeof(#N), (char*)(V), strlen(V), CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC)
#define SWIG_CHAR_CONSTANT(N, V) do {\
    static char swig_char = (V);\
    zend_register_stringl_constant((char*)#N, sizeof(#N), &swig_char, 1, CONST_CS | CONST_PERSISTENT, module_number TSRMLS_CC);\
} while (0)

/* These TSRMLS_ stuff should already be defined now, but with older php under
   redhat are not... */
#ifndef TSRMLS_D
#define TSRMLS_D
#endif
#ifndef TSRMLS_DC
#define TSRMLS_DC
#endif
#ifndef TSRMLS_C
#define TSRMLS_C
#endif
#ifndef TSRMLS_CC
#define TSRMLS_CC
#endif

#ifdef __cplusplus
}
#endif

/* But in fact SWIG_ConvertPtr is the native interface for getting typed
   pointer values out of zvals.  We need the TSRMLS_ macros for when we
   make PHP type calls later as we handle php resources */
#define SWIG_ConvertPtr(obj,pp,type,flags) SWIG_ZTS_ConvertPtr(obj,pp,type,flags TSRMLS_CC)


#define SWIG_fail goto fail

static const char *default_error_msg = "Unknown error occurred";
static int default_error_code = E_ERROR;

#define SWIG_PHP_Arg_Error_Msg(argnum,extramsg) "Error in argument " #argnum " "#extramsg

#define SWIG_PHP_Error(code,msg) do { SWIG_ErrorCode() = code; SWIG_ErrorMsg() = msg; SWIG_fail; } while (0)

#define SWIG_contract_assert(expr,msg) \
  if (!(expr) ) { zend_printf("Contract Assert Failed %s\n",msg ); } else

/* Standard SWIG API */
#define SWIG_GetModule(clientdata) SWIG_Php_GetModule(clientdata)
#define SWIG_SetModule(clientdata, pointer) SWIG_Php_SetModule(pointer)

/* used to wrap returned objects in so we know whether they are newobject
   and need freeing, or not */
typedef struct {
  void * ptr;
  int newobject;
} swig_object_wrapper;

/* empty zend destructor for types without one */
static ZEND_RSRC_DTOR_FUNC(SWIG_landfill) { (void)rsrc; }

#define SWIG_SetPointerZval(a,b,c,d) SWIG_ZTS_SetPointerZval(a,b,c,d TSRMLS_CC)
#define SWIG_as_voidptr(a) const_cast< void * >(static_cast< const void * >(a))

static void
SWIG_ZTS_SetPointerZval(zval *z, void *ptr, swig_type_info *type, int newobject TSRMLS_DC) {
  /*
   * First test for Null pointers.  Return those as PHP native NULL
   */
  if (!ptr ) {
    ZVAL_NULL(z);
    return;
  }
  if (type->clientdata) {
    swig_object_wrapper *value;
    if (! (*(int *)(type->clientdata)))
      zend_error(E_ERROR, "Type: %s failed to register with zend",type->name);
    value=(swig_object_wrapper *)emalloc(sizeof(swig_object_wrapper));
    value->ptr=ptr;
    value->newobject=(newobject & 1);
    if ((newobject & 2) == 0) {
      /* Just register the pointer as a resource. */
      ZEND_REGISTER_RESOURCE(z, value, *(int *)(type->clientdata));
    } else {
      /*
       * Wrap the resource in an object, the resource will be accessible
       * via the "_cPtr" member. This is currently only used by
       * directorin typemaps.
       */
      zval *resource;
      zend_class_entry **ce = NULL;
      const char *type_name = type->name+3; /* +3 so: _p_Foo -> Foo */
      size_t type_name_len;
      int result;
      const char * p;

      /* Namespace__Foo -> Foo */
      /* FIXME: ugly and goes wrong for classes with __ in their names. */
      while ((p = strstr(type_name, "__")) != NULL) {
        type_name = p + 2;
      }
      type_name_len = strlen(type_name);

      MAKE_STD_ZVAL(resource);
      ZEND_REGISTER_RESOURCE(resource, value, *(int *)(type->clientdata));
      if (SWIG_PREFIX_LEN > 0) {
        char * classname = (char*)emalloc(SWIG_PREFIX_LEN + type_name_len + 1);
        strcpy(classname, SWIG_PREFIX);
        strcpy(classname + SWIG_PREFIX_LEN, type_name);
        result = zend_lookup_class(classname, SWIG_PREFIX_LEN + type_name_len, &ce TSRMLS_CC);
        efree(classname);
      } else {
        result = zend_lookup_class((char *)type_name, type_name_len, &ce TSRMLS_CC);
      }
      if (result != SUCCESS) {
        /* class does not exist */
        object_init(z);
      } else {
        object_init_ex(z, *ce);
      }
      Z_SET_REFCOUNT_P(z, 1);
      Z_SET_ISREF_P(z);
      zend_hash_update(HASH_OF(z), (char*)"_cPtr", sizeof("_cPtr"), (void*)&resource, sizeof(zval), NULL);
    }
    return;
  }
  zend_error(E_ERROR, "Type: %s not registered with zend",type->name);
}

/* This pointer conversion routine takes the native pointer p (along with
   its type name) and converts it by calling appropriate casting functions
   according to ty.  The resultant pointer is returned, or NULL is returned
   if the pointer can't be cast.

   Sadly PHP has no API to find a type name from a type id, only from an
   instance of a resource of the type id, so we have to pass type_name as well.

   The two functions which might call this are:
   SWIG_ZTS_ConvertResourcePtr which gets the type name from the resource
   and the registered zend destructors for which we have one per type each
   with the type name hard wired in. */
static void *
SWIG_ZTS_ConvertResourceData(void * p, const char *type_name, swig_type_info *ty TSRMLS_DC) {
  swig_cast_info *tc;
  void *result = 0;

  if (!ty) {
    /* They don't care about the target type, so just pass on the pointer! */
    return p;
  }

  if (! type_name) {  
    /* can't convert p to ptr type ty if we don't know what type p is */
    return NULL;
  }

  /* convert and cast p from type_name to ptr as ty. */
  tc = SWIG_TypeCheck(type_name, ty);
  if (tc) {
    int newmemory = 0;
    result = SWIG_TypeCast(tc, p, &newmemory);
    assert(!newmemory); /* newmemory handling not yet implemented */
  }
  return result;
}

/* This function returns a pointer of type ty by extracting the pointer
   and type info from the resource in z.  z must be a resource.
   If it fails, NULL is returned.
   It uses SWIG_ZTS_ConvertResourceData to do the real work. */
static void *
SWIG_ZTS_ConvertResourcePtr(zval *z, swig_type_info *ty, int flags TSRMLS_DC) {
  swig_object_wrapper *value;
  void *p;
  int type;
  const char *type_name;

  value = (swig_object_wrapper *) zend_list_find(z->value.lval, &type);
  if (type==-1) return NULL;
  if (flags & SWIG_POINTER_DISOWN) {
    value->newobject = 0;
  }
  p = value->ptr;

  type_name=zend_rsrc_list_get_rsrc_type(z->value.lval TSRMLS_CC);

  return SWIG_ZTS_ConvertResourceData(p, type_name, ty TSRMLS_CC);
}

/* We allow passing of a RESOURCE pointing to the object or an OBJECT whose
   _cPtr is a resource pointing to the object */
static int
SWIG_ZTS_ConvertPtr(zval *z, void **ptr, swig_type_info *ty, int flags TSRMLS_DC) {
  if (z == NULL) {
    *ptr = 0;
    return 0;
  }

  switch (z->type) {
    case IS_OBJECT: {
      zval ** _cPtr;
      if (zend_hash_find(HASH_OF(z),(char*)"_cPtr",sizeof("_cPtr"),(void**)&_cPtr)==SUCCESS) {
	if ((*_cPtr)->type==IS_RESOURCE) {
	  *ptr = SWIG_ZTS_ConvertResourcePtr(*_cPtr, ty, flags TSRMLS_CC);
	  return (*ptr == NULL ? -1 : 0);
	}
      }
      break;
    }
    case IS_RESOURCE:
      *ptr = SWIG_ZTS_ConvertResourcePtr(z, ty, flags TSRMLS_CC);
      return (*ptr == NULL ? -1 : 0);
    case IS_NULL:
      *ptr = 0;
      return 0;
  }

  return -1;
}

static char const_name[] = "swig_runtime_data_type_pointer";
static swig_module_info *SWIG_Php_GetModule(void *SWIGUNUSEDPARM(clientdata)) {
  zval *pointer;
  swig_module_info *ret = 0;

  MAKE_STD_ZVAL(pointer);

  TSRMLS_FETCH();

  if (zend_get_constant(const_name, sizeof(const_name) - 1, pointer TSRMLS_CC)) {
    if (pointer->type == IS_LONG) {
      ret = (swig_module_info *) pointer->value.lval;
    }
  } 
  FREE_ZVAL(pointer);
  return ret; 
}

static void SWIG_Php_SetModule(swig_module_info *pointer) {
  TSRMLS_FETCH();
  REGISTER_MAIN_LONG_CONSTANT(const_name, (long) pointer, 0);
}


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_int swig_types[0]
#define SWIGTYPE_p_WXWidget swig_types[1]
#define SWIGTYPE_p_int swig_types[2]
#define SWIGTYPE_p_p_wxChar swig_types[3]
#define SWIGTYPE_p_wxAcceleratorTable swig_types[4]
#define SWIGTYPE_p_wxApp swig_types[5]
#define SWIGTYPE_p_wxAppConsole swig_types[6]
#define SWIGTYPE_p_wxAppTraits swig_types[7]
#define SWIGTYPE_p_wxBackgroundStyle swig_types[8]
#define SWIGTYPE_p_wxBorder swig_types[9]
#define SWIGTYPE_p_wxByte swig_types[10]
#define SWIGTYPE_p_wxCaret swig_types[11]
#define SWIGTYPE_p_wxChar swig_types[12]
#define SWIGTYPE_p_wxCmdLineParser swig_types[13]
#define SWIGTYPE_p_wxColour swig_types[14]
#define SWIGTYPE_p_wxCoord swig_types[15]
#define SWIGTYPE_p_wxCursor swig_types[16]
#define SWIGTYPE_p_wxDropTarget swig_types[17]
#define SWIGTYPE_p_wxEvent swig_types[18]
#define SWIGTYPE_p_wxEventFunction swig_types[19]
#define SWIGTYPE_p_wxEventLoopBase swig_types[20]
#define SWIGTYPE_p_wxEvtHandler swig_types[21]
#define SWIGTYPE_p_wxFont swig_types[22]
#define SWIGTYPE_p_wxFrame swig_types[23]
#define SWIGTYPE_p_wxGraphicsPath swig_types[24]
#define SWIGTYPE_p_wxHelpEvent__Origin swig_types[25]
#define SWIGTYPE_p_wxHitTest swig_types[26]
#define SWIGTYPE_p_wxIcon swig_types[27]
#define SWIGTYPE_p_wxIconBundle swig_types[28]
#define SWIGTYPE_p_wxInitializer swig_types[29]
#define SWIGTYPE_p_wxKeyEvent swig_types[30]
#define SWIGTYPE_p_wxLayoutConstraints swig_types[31]
#define SWIGTYPE_p_wxLayoutDirection swig_types[32]
#define SWIGTYPE_p_wxMenu swig_types[33]
#define SWIGTYPE_p_wxMenuBar swig_types[34]
#define SWIGTYPE_p_wxNonOwnedWindow swig_types[35]
#define SWIGTYPE_p_wxObject swig_types[36]
#define SWIGTYPE_p_wxPalette swig_types[37]
#define SWIGTYPE_p_wxPoint swig_types[38]
#define SWIGTYPE_p_wxRect swig_types[39]
#define SWIGTYPE_p_wxRegion swig_types[40]
#define SWIGTYPE_p_wxSize swig_types[41]
#define SWIGTYPE_p_wxSizer swig_types[42]
#define SWIGTYPE_p_wxStatusBar swig_types[43]
#define SWIGTYPE_p_wxString swig_types[44]
#define SWIGTYPE_p_wxToolBar swig_types[45]
#define SWIGTYPE_p_wxToolTip swig_types[46]
#define SWIGTYPE_p_wxTopLevelWindow swig_types[47]
#define SWIGTYPE_p_wxUpdateUIEvent swig_types[48]
#define SWIGTYPE_p_wxValidator swig_types[49]
#define SWIGTYPE_p_wxVideoMode swig_types[50]
#define SWIGTYPE_p_wxVisualAttributes swig_types[51]
#define SWIGTYPE_p_wxWindow swig_types[52]
#define SWIGTYPE_p_wxWindowBase swig_types[53]
#define SWIGTYPE_p_wxWindowID swig_types[54]
#define SWIGTYPE_p_wxWindowList swig_types[55]
static swig_type_info *swig_types[57];
static swig_module_info swig_module = {swig_types, 56, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

/* header section */
ZEND_BEGIN_MODULE_GLOBALS(wxwidgets)
const char *error_msg;
int error_code;
ZEND_END_MODULE_GLOBALS(wxwidgets)
ZEND_DECLARE_MODULE_GLOBALS(wxwidgets)
#ifdef ZTS
#define SWIG_ErrorMsg() TSRMG(wxwidgets_globals_id, zend_wxwidgets_globals *, error_msg )
#define SWIG_ErrorCode() TSRMG(wxwidgets_globals_id, zend_wxwidgets_globals *, error_code )
#else
#define SWIG_ErrorMsg() (wxwidgets_globals.error_msg)
#define SWIG_ErrorCode() (wxwidgets_globals.error_code)
#endif

#ifdef __GNUC__
static void SWIG_FAIL() __attribute__ ((__noreturn__));
#endif

static void SWIG_FAIL() {
    TSRMLS_FETCH();
    zend_error(SWIG_ErrorCode(), "%s", SWIG_ErrorMsg());
    abort();
}

static void wxwidgets_init_globals(zend_wxwidgets_globals *globals ) {
  globals->error_msg = default_error_msg;
  globals->error_code = default_error_code;
}
static void wxwidgets_destroy_globals(zend_wxwidgets_globals * globals) { (void)globals; }

static void SWIG_ResetError() {
  TSRMLS_FETCH();
  SWIG_ErrorMsg() = default_error_msg;
  SWIG_ErrorCode() = default_error_code;
}

ZEND_NAMED_FUNCTION(_wrap_swig_wxwidgets_alter_newobject) {
  zval **args[2];
  swig_object_wrapper *value;
  int type;
  int thisown;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  value->newobject = zval_is_true(*args[1]);

  return;
}
ZEND_NAMED_FUNCTION(_wrap_swig_wxwidgets_get_newobject) {
  zval **args[1];
  swig_object_wrapper *value;
  int type;

  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }

  value = (swig_object_wrapper *) zend_list_find((*args[0])->value.lval, &type);
  RETVAL_LONG(value->newobject);

  return;
}
#define SWIG_name  "wxwidgets"
#ifdef __cplusplus
extern "C" {
#endif
#include "php.h"
#include "php_ini.h"
#include "ext/standard/info.h"
#include "php_wxwidgets.h"
#ifdef __cplusplus
}
#endif


#ifdef __cplusplus
#include <wx/wx.h>       // for the base class
#endif


#ifdef __cplusplus
#include <wx/init.h>       // for the base class
#endif


#ifdef __cplusplus
#include <wx/app.h>       // for the base class
#include <wx/vidmode.h>
#endif


#ifdef __cplusplus
#include <wx/window.h>       // for the base class
#endif


#ifdef __cplusplus
#include <wx/frame.h>       // for the base class
#endif


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_wxAppTo_p_wxAppConsole(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxAppConsole *)  ((wxApp *) x));
}
static void *_p_wxWindowTo_p_wxEvtHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxEvtHandler *)  ((wxWindow *) x));
}
static void *_p_wxNonOwnedWindowTo_p_wxEvtHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxEvtHandler *) (wxWindow *) ((wxNonOwnedWindow *) x));
}
static void *_p_wxTopLevelWindowTo_p_wxEvtHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxEvtHandler *) (wxWindow *)(wxNonOwnedWindow *) ((wxTopLevelWindow *) x));
}
static void *_p_wxAppConsoleTo_p_wxEvtHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxEvtHandler *)  ((wxAppConsole *) x));
}
static void *_p_wxFrameTo_p_wxEvtHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxEvtHandler *) (wxWindow *)(wxNonOwnedWindow *)(wxTopLevelWindow *) ((wxFrame *) x));
}
static void *_p_wxAppTo_p_wxEvtHandler(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxEvtHandler *) (wxAppConsole *) ((wxApp *) x));
}
static void *_p_wxFrameTo_p_wxTopLevelWindow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxTopLevelWindow *)  ((wxFrame *) x));
}
static void *_p_wxTopLevelWindowTo_p_wxNonOwnedWindow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxNonOwnedWindow *)  ((wxTopLevelWindow *) x));
}
static void *_p_wxFrameTo_p_wxNonOwnedWindow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxNonOwnedWindow *) (wxTopLevelWindow *) ((wxFrame *) x));
}
static void *_p_wxNonOwnedWindowTo_p_wxWindow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxWindow *)  ((wxNonOwnedWindow *) x));
}
static void *_p_wxTopLevelWindowTo_p_wxWindow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxWindow *) (wxNonOwnedWindow *) ((wxTopLevelWindow *) x));
}
static void *_p_wxFrameTo_p_wxWindow(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((wxWindow *) (wxNonOwnedWindow *)(wxTopLevelWindow *) ((wxFrame *) x));
}
static swig_type_info _swigt__int = {"_int", "int", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_WXWidget = {"_p_WXWidget", "WXWidget *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_int = {"_p_int", "int *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_p_wxChar = {"_p_p_wxChar", "wxChar **", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxAcceleratorTable = {"_p_wxAcceleratorTable", "wxAcceleratorTable *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxApp = {"_p_wxApp", "wxApp *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxAppConsole = {"_p_wxAppConsole", "wxAppConsole *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxAppTraits = {"_p_wxAppTraits", "wxAppTraits *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxBackgroundStyle = {"_p_wxBackgroundStyle", "wxBackgroundStyle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxBorder = {"_p_wxBorder", "wxBorder *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxByte = {"_p_wxByte", "wxByte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxCaret = {"_p_wxCaret", "wxCaret *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxChar = {"_p_wxChar", "wxChar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxCmdLineParser = {"_p_wxCmdLineParser", "wxCmdLineParser *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxColour = {"_p_wxColour", "wxColour *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxCoord = {"_p_wxCoord", "wxCoord *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxCursor = {"_p_wxCursor", "wxCursor *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxDropTarget = {"_p_wxDropTarget", "wxDropTarget *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxEvent = {"_p_wxEvent", "wxEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxEventFunction = {"_p_wxEventFunction", "wxEventFunction *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxEventLoopBase = {"_p_wxEventLoopBase", "wxEventLoopBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxEvtHandler = {"_p_wxEvtHandler", "wxEvtHandler *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxFont = {"_p_wxFont", "wxFont *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxFrame = {"_p_wxFrame", "wxFrame *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxGraphicsPath = {"_p_wxGraphicsPath", "wxGraphicsPath *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxHelpEvent__Origin = {"_p_wxHelpEvent__Origin", "wxHelpEvent::Origin *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxHitTest = {"_p_wxHitTest", "wxHitTest *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxIcon = {"_p_wxIcon", "wxIcon *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxIconBundle = {"_p_wxIconBundle", "wxIconBundle *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxInitializer = {"_p_wxInitializer", "wxInitializer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxKeyEvent = {"_p_wxKeyEvent", "wxKeyEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxLayoutConstraints = {"_p_wxLayoutConstraints", "wxLayoutConstraints *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxLayoutDirection = {"_p_wxLayoutDirection", "wxLayoutDirection *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxMenu = {"_p_wxMenu", "wxMenu *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxMenuBar = {"_p_wxMenuBar", "wxMenuBar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxNonOwnedWindow = {"_p_wxNonOwnedWindow", "wxNonOwnedWindow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxObject = {"_p_wxObject", "wxObject *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxPalette = {"_p_wxPalette", "wxPalette *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxPoint = {"_p_wxPoint", "wxPoint *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxRect = {"_p_wxRect", "wxRect *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxRegion = {"_p_wxRegion", "wxRegion *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxSize = {"_p_wxSize", "wxSize *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxSizer = {"_p_wxSizer", "wxSizer *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxStatusBar = {"_p_wxStatusBar", "wxStatusBar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxString = {"_p_wxString", "wxString *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxToolBar = {"_p_wxToolBar", "wxToolBar *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxToolTip = {"_p_wxToolTip", "wxToolTip *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxTopLevelWindow = {"_p_wxTopLevelWindow", "wxTopLevelWindow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxUpdateUIEvent = {"_p_wxUpdateUIEvent", "wxUpdateUIEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxValidator = {"_p_wxValidator", "wxValidator *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxVideoMode = {"_p_wxVideoMode", "wxVideoMode *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxVisualAttributes = {"_p_wxVisualAttributes", "wxVisualAttributes *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxWindow = {"_p_wxWindow", "wxWindow *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxWindowBase = {"_p_wxWindowBase", "wxWindowBase *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxWindowID = {"_p_wxWindowID", "wxWindowID *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_wxWindowList = {"_p_wxWindowList", "wxWindowList *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__int,
  &_swigt__p_WXWidget,
  &_swigt__p_int,
  &_swigt__p_p_wxChar,
  &_swigt__p_wxAcceleratorTable,
  &_swigt__p_wxApp,
  &_swigt__p_wxAppConsole,
  &_swigt__p_wxAppTraits,
  &_swigt__p_wxBackgroundStyle,
  &_swigt__p_wxBorder,
  &_swigt__p_wxByte,
  &_swigt__p_wxCaret,
  &_swigt__p_wxChar,
  &_swigt__p_wxCmdLineParser,
  &_swigt__p_wxColour,
  &_swigt__p_wxCoord,
  &_swigt__p_wxCursor,
  &_swigt__p_wxDropTarget,
  &_swigt__p_wxEvent,
  &_swigt__p_wxEventFunction,
  &_swigt__p_wxEventLoopBase,
  &_swigt__p_wxEvtHandler,
  &_swigt__p_wxFont,
  &_swigt__p_wxFrame,
  &_swigt__p_wxGraphicsPath,
  &_swigt__p_wxHelpEvent__Origin,
  &_swigt__p_wxHitTest,
  &_swigt__p_wxIcon,
  &_swigt__p_wxIconBundle,
  &_swigt__p_wxInitializer,
  &_swigt__p_wxKeyEvent,
  &_swigt__p_wxLayoutConstraints,
  &_swigt__p_wxLayoutDirection,
  &_swigt__p_wxMenu,
  &_swigt__p_wxMenuBar,
  &_swigt__p_wxNonOwnedWindow,
  &_swigt__p_wxObject,
  &_swigt__p_wxPalette,
  &_swigt__p_wxPoint,
  &_swigt__p_wxRect,
  &_swigt__p_wxRegion,
  &_swigt__p_wxSize,
  &_swigt__p_wxSizer,
  &_swigt__p_wxStatusBar,
  &_swigt__p_wxString,
  &_swigt__p_wxToolBar,
  &_swigt__p_wxToolTip,
  &_swigt__p_wxTopLevelWindow,
  &_swigt__p_wxUpdateUIEvent,
  &_swigt__p_wxValidator,
  &_swigt__p_wxVideoMode,
  &_swigt__p_wxVisualAttributes,
  &_swigt__p_wxWindow,
  &_swigt__p_wxWindowBase,
  &_swigt__p_wxWindowID,
  &_swigt__p_wxWindowList,
};

static swig_cast_info _swigc__int[] = {  {&_swigt__int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_WXWidget[] = {  {&_swigt__p_WXWidget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_int[] = {  {&_swigt__p_int, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_p_wxChar[] = {  {&_swigt__p_p_wxChar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxAcceleratorTable[] = {  {&_swigt__p_wxAcceleratorTable, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxApp[] = {  {&_swigt__p_wxApp, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxAppConsole[] = {  {&_swigt__p_wxAppConsole, 0, 0, 0},  {&_swigt__p_wxApp, _p_wxAppTo_p_wxAppConsole, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxAppTraits[] = {  {&_swigt__p_wxAppTraits, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxBackgroundStyle[] = {  {&_swigt__p_wxBackgroundStyle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxBorder[] = {  {&_swigt__p_wxBorder, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxByte[] = {  {&_swigt__p_wxByte, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCaret[] = {  {&_swigt__p_wxCaret, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxChar[] = {  {&_swigt__p_wxChar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCmdLineParser[] = {  {&_swigt__p_wxCmdLineParser, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxColour[] = {  {&_swigt__p_wxColour, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCoord[] = {  {&_swigt__p_wxCoord, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxCursor[] = {  {&_swigt__p_wxCursor, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxDropTarget[] = {  {&_swigt__p_wxDropTarget, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxEvent[] = {  {&_swigt__p_wxEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxEventFunction[] = {  {&_swigt__p_wxEventFunction, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxEventLoopBase[] = {  {&_swigt__p_wxEventLoopBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxEvtHandler[] = {  {&_swigt__p_wxWindow, _p_wxWindowTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxNonOwnedWindow, _p_wxNonOwnedWindowTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxTopLevelWindow, _p_wxTopLevelWindowTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxEvtHandler, 0, 0, 0},  {&_swigt__p_wxAppConsole, _p_wxAppConsoleTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxFrame, _p_wxFrameTo_p_wxEvtHandler, 0, 0},  {&_swigt__p_wxApp, _p_wxAppTo_p_wxEvtHandler, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFont[] = {  {&_swigt__p_wxFont, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxFrame[] = {  {&_swigt__p_wxFrame, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxGraphicsPath[] = {  {&_swigt__p_wxGraphicsPath, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxHelpEvent__Origin[] = {  {&_swigt__p_wxHelpEvent__Origin, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxHitTest[] = {  {&_swigt__p_wxHitTest, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxIcon[] = {  {&_swigt__p_wxIcon, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxIconBundle[] = {  {&_swigt__p_wxIconBundle, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxInitializer[] = {  {&_swigt__p_wxInitializer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxKeyEvent[] = {  {&_swigt__p_wxKeyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLayoutConstraints[] = {  {&_swigt__p_wxLayoutConstraints, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxLayoutDirection[] = {  {&_swigt__p_wxLayoutDirection, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMenu[] = {  {&_swigt__p_wxMenu, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxMenuBar[] = {  {&_swigt__p_wxMenuBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxNonOwnedWindow[] = {  {&_swigt__p_wxNonOwnedWindow, 0, 0, 0},  {&_swigt__p_wxTopLevelWindow, _p_wxTopLevelWindowTo_p_wxNonOwnedWindow, 0, 0},  {&_swigt__p_wxFrame, _p_wxFrameTo_p_wxNonOwnedWindow, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxObject[] = {  {&_swigt__p_wxObject, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPalette[] = {  {&_swigt__p_wxPalette, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxPoint[] = {  {&_swigt__p_wxPoint, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxRect[] = {  {&_swigt__p_wxRect, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxRegion[] = {  {&_swigt__p_wxRegion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSize[] = {  {&_swigt__p_wxSize, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxSizer[] = {  {&_swigt__p_wxSizer, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxStatusBar[] = {  {&_swigt__p_wxStatusBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxString[] = {  {&_swigt__p_wxString, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxToolBar[] = {  {&_swigt__p_wxToolBar, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxToolTip[] = {  {&_swigt__p_wxToolTip, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxTopLevelWindow[] = {  {&_swigt__p_wxTopLevelWindow, 0, 0, 0},  {&_swigt__p_wxFrame, _p_wxFrameTo_p_wxTopLevelWindow, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxUpdateUIEvent[] = {  {&_swigt__p_wxUpdateUIEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxValidator[] = {  {&_swigt__p_wxValidator, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxVideoMode[] = {  {&_swigt__p_wxVideoMode, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxVisualAttributes[] = {  {&_swigt__p_wxVisualAttributes, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindow[] = {  {&_swigt__p_wxWindow, 0, 0, 0},  {&_swigt__p_wxNonOwnedWindow, _p_wxNonOwnedWindowTo_p_wxWindow, 0, 0},  {&_swigt__p_wxTopLevelWindow, _p_wxTopLevelWindowTo_p_wxWindow, 0, 0},  {&_swigt__p_wxFrame, _p_wxFrameTo_p_wxWindow, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindowBase[] = {  {&_swigt__p_wxWindowBase, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindowID[] = {  {&_swigt__p_wxWindowID, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_wxWindowList[] = {  {&_swigt__p_wxWindowList, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__int,
  _swigc__p_WXWidget,
  _swigc__p_int,
  _swigc__p_p_wxChar,
  _swigc__p_wxAcceleratorTable,
  _swigc__p_wxApp,
  _swigc__p_wxAppConsole,
  _swigc__p_wxAppTraits,
  _swigc__p_wxBackgroundStyle,
  _swigc__p_wxBorder,
  _swigc__p_wxByte,
  _swigc__p_wxCaret,
  _swigc__p_wxChar,
  _swigc__p_wxCmdLineParser,
  _swigc__p_wxColour,
  _swigc__p_wxCoord,
  _swigc__p_wxCursor,
  _swigc__p_wxDropTarget,
  _swigc__p_wxEvent,
  _swigc__p_wxEventFunction,
  _swigc__p_wxEventLoopBase,
  _swigc__p_wxEvtHandler,
  _swigc__p_wxFont,
  _swigc__p_wxFrame,
  _swigc__p_wxGraphicsPath,
  _swigc__p_wxHelpEvent__Origin,
  _swigc__p_wxHitTest,
  _swigc__p_wxIcon,
  _swigc__p_wxIconBundle,
  _swigc__p_wxInitializer,
  _swigc__p_wxKeyEvent,
  _swigc__p_wxLayoutConstraints,
  _swigc__p_wxLayoutDirection,
  _swigc__p_wxMenu,
  _swigc__p_wxMenuBar,
  _swigc__p_wxNonOwnedWindow,
  _swigc__p_wxObject,
  _swigc__p_wxPalette,
  _swigc__p_wxPoint,
  _swigc__p_wxRect,
  _swigc__p_wxRegion,
  _swigc__p_wxSize,
  _swigc__p_wxSizer,
  _swigc__p_wxStatusBar,
  _swigc__p_wxString,
  _swigc__p_wxToolBar,
  _swigc__p_wxToolTip,
  _swigc__p_wxTopLevelWindow,
  _swigc__p_wxUpdateUIEvent,
  _swigc__p_wxValidator,
  _swigc__p_wxVideoMode,
  _swigc__p_wxVisualAttributes,
  _swigc__p_wxWindow,
  _swigc__p_wxWindowBase,
  _swigc__p_wxWindowID,
  _swigc__p_wxWindowList,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* end header section */
/* vdecl subsection */
static int le_swig__p_wxInitializer=0; /* handle for wxInitializer */
static int le_swig__p_wxColour=0; /* handle for _p_wxColour */
static int le_swig__p_wxCoord=0; /* handle for _p_wxCoord */
static int le_swig__p_wxVideoMode=0; /* handle for _p_wxVideoMode */
static int le_swig__p_wxValidator=0; /* handle for _p_wxValidator */
static int le_swig__p_wxToolBar=0; /* handle for _p_wxToolBar */
static int le_swig__p_wxMenuBar=0; /* handle for _p_wxMenuBar */
static int le_swig__p_wxWindowID=0; /* handle for _p_wxWindowID */
static int le_swig__p_wxVisualAttributes=0; /* handle for wxVisualAttributes */
static int le_swig__p_wxSizer=0; /* handle for _p_wxSizer */
static int le_swig__p_wxToolTip=0; /* handle for _p_wxToolTip */
static int le_swig__p_wxAppTraits=0; /* handle for _p_wxAppTraits */
static int le_swig__p_wxStatusBar=0; /* handle for _p_wxStatusBar */
static int le_swig__p_wxSize=0; /* handle for _p_wxSize */
static int le_swig__p_wxFont=0; /* handle for _p_wxFont */
static int le_swig__p_wxWindow=0; /* handle for wxWindow */
static int le_swig__p_wxNonOwnedWindow=0; /* handle for wxNonOwnedWindow */
static int le_swig__p_wxTopLevelWindow=0; /* handle for wxTopLevelWindow */
static int le_swig__int=0; /* handle for _int */
static int le_swig__p_wxDropTarget=0; /* handle for _p_wxDropTarget */
static int le_swig__p_wxApp=0; /* handle for wxApp */
static int le_swig__p_wxWindowBase=0; /* handle for _p_wxWindowBase */
static int le_swig__p_wxByte=0; /* handle for _p_wxByte */
static int le_swig__p_wxAcceleratorTable=0; /* handle for _p_wxAcceleratorTable */
static int le_swig__p_wxWindowList=0; /* handle for _p_wxWindowList */
static int le_swig__p_wxLayoutDirection=0; /* handle for _p_wxLayoutDirection */
static int le_swig__p_WXWidget=0; /* handle for _p_WXWidget */
static int le_swig__p_p_wxChar=0; /* handle for _p_p_wxChar */
static int le_swig__p_wxChar=0; /* handle for _p_wxChar */
static int le_swig__p_wxEvent=0; /* handle for _p_wxEvent */
static int le_swig__p_wxPalette=0; /* handle for _p_wxPalette */
static int le_swig__p_wxObject=0; /* handle for _p_wxObject */
static int le_swig__p_wxRect=0; /* handle for _p_wxRect */
static int le_swig__p_wxString=0; /* handle for _p_wxString */
static int le_swig__p_wxCmdLineParser=0; /* handle for _p_wxCmdLineParser */
static int le_swig__p_wxBackgroundStyle=0; /* handle for _p_wxBackgroundStyle */
static int le_swig__p_wxEvtHandler=0; /* handle for _p_wxEvtHandler */
static int le_swig__p_wxIconBundle=0; /* handle for _p_wxIconBundle */
static int le_swig__p_wxPoint=0; /* handle for _p_wxPoint */
static int le_swig__p_wxCaret=0; /* handle for _p_wxCaret */
static int le_swig__p_wxLayoutConstraints=0; /* handle for _p_wxLayoutConstraints */
static int le_swig__p_wxUpdateUIEvent=0; /* handle for _p_wxUpdateUIEvent */
static int le_swig__p_wxGraphicsPath=0; /* handle for _p_wxGraphicsPath */
static int le_swig__p_wxCursor=0; /* handle for _p_wxCursor */
static int le_swig__p_wxHitTest=0; /* handle for _p_wxHitTest */
static int le_swig__p_wxIcon=0; /* handle for _p_wxIcon */
static int le_swig__p_wxHelpEvent__Origin=0; /* handle for _p_wxHelpEvent__Origin */
static int le_swig__p_wxRegion=0; /* handle for _p_wxRegion */
static int le_swig__p_wxEventLoopBase=0; /* handle for _p_wxEventLoopBase */
static int le_swig__p_wxFrame=0; /* handle for wxFrame */
static int le_swig__p_wxAppConsole=0; /* handle for wxAppConsole */
static int le_swig__p_wxMenu=0; /* handle for _p_wxMenu */
static int le_swig__p_wxEventFunction=0; /* handle for _p_wxEventFunction */
static int le_swig__p_int=0; /* handle for _p_int */
static int le_swig__p_wxKeyEvent=0; /* handle for _p_wxKeyEvent */
static int le_swig__p_wxBorder=0; /* handle for _p_wxBorder */
/* end vdecl subsection */
/* wrapper section */
ZEND_NAMED_FUNCTION(_wrap_new_wxInitializer) {
  int arg1 ;
  wxChar **arg2 = (wxChar **) 0 ;
  zval **args[2];
  wxInitializer *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_wxChar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxInitializer. Expected SWIGTYPE_p_p_wxChar");
    }
  }
  result = (wxInitializer *)new wxInitializer(arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxInitializer, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxInitializer_IsOk) {
  wxInitializer *arg1 = (wxInitializer *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxInitializer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxInitializer_IsOk. Expected SWIGTYPE_p_wxInitializer");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxInitializer const *)arg1)->IsOk();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_wxInitializer(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  wxInitializer *arg1 = (wxInitializer *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (wxInitializer *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_wxInitializer TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "wxInitializer resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxEntryStart) {
  int arg1 ;
  wxChar **arg2 = (wxChar **) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_wxChar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxEntryStart. Expected SWIGTYPE_p_p_wxChar");
    }
  }
  result = (bool)wxEntryStart(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxEntryCleanup) {
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  wxEntryCleanup();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxInitialize__SWIG_0) {
  int arg1 ;
  wxChar **arg2 = (wxChar **) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_wxChar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxInitialize. Expected SWIGTYPE_p_p_wxChar");
    }
  }
  result = (bool)wxInitialize(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxUninitialize) {
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  wxUninitialize();
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_wxAppConsole(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (wxAppConsole *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_wxAppConsole TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "wxAppConsole resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_MainLoop) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_MainLoop. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->MainLoop();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_ExitMainLoop) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_ExitMainLoop. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->ExitMainLoop();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_FilterEvent) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxEvent *arg2 = 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_FilterEvent. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEvent, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_FilterEvent. Expected SWIGTYPE_p_wxEvent");
    }
  }
  result = (int)(arg1)->FilterEvent(*arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_GetMainLoop) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  wxEventLoopBase *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_GetMainLoop. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxEventLoopBase *)((wxAppConsole const *)arg1)->GetMainLoop();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxEventLoopBase, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_HandleEvent) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxEvtHandler *arg2 = (wxEvtHandler *) 0 ;
  wxEventFunction arg3 ;
  wxEvent *arg4 = 0 ;
  wxEventFunction *tmp3 ;
  zval **args[4];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_HandleEvent. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEvtHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_HandleEvent. Expected SWIGTYPE_p_wxEvtHandler");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxEventFunction, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxAppConsole_HandleEvent. Expected SWIGTYPE_p_wxEventFunction");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxEvent, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxAppConsole_HandleEvent. Expected SWIGTYPE_p_wxEvent");
    }
  }
  ((wxAppConsole const *)arg1)->HandleEvent(arg2,arg3,*arg4);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_UsesEventLoop) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_UsesEventLoop. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxAppConsole const *)arg1)->UsesEventLoop();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_ProcessPendingEvents) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_ProcessPendingEvents. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->ProcessPendingEvents();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_DeletePendingEvents) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_DeletePendingEvents. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->DeletePendingEvents();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_HasPendingEvents) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_HasPendingEvents. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxAppConsole const *)arg1)->HasPendingEvents();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_SuspendProcessingOfPendingEvents) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_SuspendProcessingOfPendingEvents. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->SuspendProcessingOfPendingEvents();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_ResumeProcessingOfPendingEvents) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_ResumeProcessingOfPendingEvents. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->ResumeProcessingOfPendingEvents();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_ScheduleForDestruction) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxObject *arg2 = (wxObject *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_ScheduleForDestruction. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxObject, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_ScheduleForDestruction. Expected SWIGTYPE_p_wxObject");
    }
  }
  (arg1)->ScheduleForDestruction(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_IsScheduledForDestruction) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxObject *arg2 = (wxObject *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_IsScheduledForDestruction. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxObject, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_IsScheduledForDestruction. Expected SWIGTYPE_p_wxObject");
    }
  }
  result = (bool)((wxAppConsole const *)arg1)->IsScheduledForDestruction(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_Yield__SWIG_0) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  bool arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_Yield. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->Yield(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_Yield__SWIG_1) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_Yield. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->Yield();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_Yield) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxAppConsole, 0) >= 0);
    }
    if (_v) {
      _wrap_wxAppConsole_Yield__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxAppConsole, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxAppConsole_Yield__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxAppConsole_Yield'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_SetInstance) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_SetInstance. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  wxAppConsole::SetInstance(arg1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_GetInstance) {
  wxAppConsole *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (wxAppConsole *)wxAppConsole::GetInstance();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxAppConsole, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_IsMainLoopRunning) {
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (bool)wxAppConsole::IsMainLoopRunning();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnAssertFailure) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxChar *arg2 = (wxChar *) 0 ;
  int arg3 ;
  wxChar *arg4 = (wxChar *) 0 ;
  wxChar *arg5 = (wxChar *) 0 ;
  wxChar *arg6 = (wxChar *) 0 ;
  zval **args[6];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnAssertFailure. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxChar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_OnAssertFailure. Expected SWIGTYPE_p_wxChar");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxChar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxAppConsole_OnAssertFailure. Expected SWIGTYPE_p_wxChar");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxChar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxAppConsole_OnAssertFailure. Expected SWIGTYPE_p_wxChar");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_wxChar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of wxAppConsole_OnAssertFailure. Expected SWIGTYPE_p_wxChar");
    }
  }
  (arg1)->OnAssertFailure((wxChar const *)arg2,arg3,(wxChar const *)arg4,(wxChar const *)arg5,(wxChar const *)arg6);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnCmdLineError) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxCmdLineParser *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnCmdLineError. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxCmdLineParser, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_OnCmdLineError. Expected SWIGTYPE_p_wxCmdLineParser");
    }
  }
  result = (bool)(arg1)->OnCmdLineError(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnCmdLineHelp) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxCmdLineParser *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnCmdLineHelp. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxCmdLineParser, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_OnCmdLineHelp. Expected SWIGTYPE_p_wxCmdLineParser");
    }
  }
  result = (bool)(arg1)->OnCmdLineHelp(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnCmdLineParsed) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxCmdLineParser *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnCmdLineParsed. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxCmdLineParser, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_OnCmdLineParsed. Expected SWIGTYPE_p_wxCmdLineParser");
    }
  }
  result = (bool)(arg1)->OnCmdLineParsed(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnEventLoopEnter) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxEventLoopBase *arg2 = (wxEventLoopBase *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnEventLoopEnter. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEventLoopBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_OnEventLoopEnter. Expected SWIGTYPE_p_wxEventLoopBase");
    }
  }
  (arg1)->OnEventLoopEnter(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnEventLoopExit) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxEventLoopBase *arg2 = (wxEventLoopBase *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnEventLoopExit. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEventLoopBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_OnEventLoopExit. Expected SWIGTYPE_p_wxEventLoopBase");
    }
  }
  (arg1)->OnEventLoopExit(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnExceptionInMainLoop) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnExceptionInMainLoop. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->OnExceptionInMainLoop();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnExit) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnExit. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->OnExit();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnFatalException) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnFatalException. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->OnFatalException();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnInit) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnInit. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->OnInit();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnInitCmdLine) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxCmdLineParser *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnInitCmdLine. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxCmdLineParser, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_OnInitCmdLine. Expected SWIGTYPE_p_wxCmdLineParser");
    }
  }
  (arg1)->OnInitCmdLine(*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnRun) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnRun. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)(arg1)->OnRun();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_OnUnhandledException) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_OnUnhandledException. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->OnUnhandledException();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_GetAppDisplayName) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  wxString result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_GetAppDisplayName. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxAppConsole const *)arg1)->GetAppDisplayName();
  {
    wxString * resultobj = new wxString((const wxString &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxString, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_GetAppName) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  wxString result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_GetAppName. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxAppConsole const *)arg1)->GetAppName();
  {
    wxString * resultobj = new wxString((const wxString &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxString, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_GetClassName) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  wxString result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_GetClassName. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxAppConsole const *)arg1)->GetClassName();
  {
    wxString * resultobj = new wxString((const wxString &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxString, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_GetTraits) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  wxAppTraits *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_GetTraits. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxAppTraits *)(arg1)->GetTraits();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxAppTraits, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_GetVendorDisplayName) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  wxString *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_GetVendorDisplayName. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxString *) &((wxAppConsole const *)arg1)->GetVendorDisplayName();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxString, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_GetVendorName) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  wxString *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_GetVendorName. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxString *) &((wxAppConsole const *)arg1)->GetVendorName();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxString, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_SetAppDisplayName) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_SetAppDisplayName. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_SetAppDisplayName. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetAppDisplayName((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_SetAppName) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_SetAppName. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_SetAppName. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetAppName((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_SetClassName) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_SetClassName. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_SetClassName. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetClassName((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_SetVendorDisplayName) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_SetVendorDisplayName. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_SetVendorDisplayName. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetVendorDisplayName((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_SetVendorName) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_SetVendorName. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_SetVendorName. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetVendorName((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_argc_set) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_argc_set. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  if (arg1) (arg1)->argc = arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_argc_get) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_argc_get. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int) ((arg1)->argc);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_argv_set) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  wxChar **arg2 = (wxChar **) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_argv_set. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_wxChar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxAppConsole_argv_set. Expected SWIGTYPE_p_p_wxChar");
    }
  }
  if (arg1) (arg1)->argv = arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxAppConsole_argv_get) {
  wxAppConsole *arg1 = (wxAppConsole *) 0 ;
  zval **args[1];
  wxChar **result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxAppConsole, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxAppConsole_argv_get. Expected SWIGTYPE_p_wxAppConsole");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxChar **) ((arg1)->argv);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_p_wxChar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxAppConsole) {
  wxAppConsole *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (wxAppConsole *)new wxAppConsole();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxAppConsole, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxApp) {
  wxApp *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (wxApp *)new wxApp();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxApp, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_wxApp(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  wxApp *arg1 = (wxApp *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (wxApp *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_wxApp TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "wxApp resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_GetDisplayMode) {
  wxApp *arg1 = (wxApp *) 0 ;
  zval **args[1];
  wxVideoMode result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_GetDisplayMode. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxApp const *)arg1)->GetDisplayMode();
  {
    wxVideoMode * resultobj = new wxVideoMode((const wxVideoMode &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxVideoMode, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_GetExitOnFrameDelete) {
  wxApp *arg1 = (wxApp *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_GetExitOnFrameDelete. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxApp const *)arg1)->GetExitOnFrameDelete();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_GetLayoutDirection) {
  wxApp *arg1 = (wxApp *) 0 ;
  zval **args[1];
  wxLayoutDirection result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_GetLayoutDirection. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxApp const *)arg1)->GetLayoutDirection();
  {
    wxLayoutDirection * resultobj = new wxLayoutDirection((const wxLayoutDirection &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxLayoutDirection, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_GetUseBestVisual) {
  wxApp *arg1 = (wxApp *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_GetUseBestVisual. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxApp const *)arg1)->GetUseBestVisual();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_GetTopWindow) {
  wxApp *arg1 = (wxApp *) 0 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_GetTopWindow. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxWindow *)((wxApp const *)arg1)->GetTopWindow();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_IsActive) {
  wxApp *arg1 = (wxApp *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_IsActive. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxApp const *)arg1)->IsActive();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_SafeYield) {
  wxApp *arg1 = (wxApp *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  bool arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_SafeYield. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxApp_SafeYield. Expected SWIGTYPE_p_wxWindow");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->SafeYield(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_SafeYieldFor) {
  wxApp *arg1 = (wxApp *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  long arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_SafeYieldFor. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxApp_SafeYieldFor. Expected SWIGTYPE_p_wxWindow");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (long) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->SafeYieldFor(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_SetDisplayMode) {
  wxApp *arg1 = (wxApp *) 0 ;
  wxVideoMode *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_SetDisplayMode. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxVideoMode, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxApp_SetDisplayMode. Expected SWIGTYPE_p_wxVideoMode");
    }
  }
  result = (bool)(arg1)->SetDisplayMode((wxVideoMode const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_SetExitOnFrameDelete) {
  wxApp *arg1 = (wxApp *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_SetExitOnFrameDelete. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SetExitOnFrameDelete(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_SetNativeTheme) {
  wxApp *arg1 = (wxApp *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_SetNativeTheme. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxApp_SetNativeTheme. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (bool)(arg1)->SetNativeTheme((wxString const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_SetTopWindow) {
  wxApp *arg1 = (wxApp *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_SetTopWindow. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxApp_SetTopWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  (arg1)->SetTopWindow(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_SetUseBestVisual__SWIG_0) {
  wxApp *arg1 = (wxApp *) 0 ;
  bool arg2 ;
  bool arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_SetUseBestVisual. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->SetUseBestVisual(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_SetUseBestVisual__SWIG_1) {
  wxApp *arg1 = (wxApp *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxApp, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxApp_SetUseBestVisual. Expected SWIGTYPE_p_wxApp");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SetUseBestVisual(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxApp_SetUseBestVisual) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxApp, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxApp_SetUseBestVisual__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxApp, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_wxApp_SetUseBestVisual__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxApp_SetUseBestVisual'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxHandleFatalExceptions__SWIG_0) {
  bool arg1 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[0]);
  arg1 = (bool) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (bool)wxHandleFatalExceptions(arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxHandleFatalExceptions__SWIG_1) {
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (bool)wxHandleFatalExceptions();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxHandleFatalExceptions) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_wxHandleFatalExceptions__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_BOOL); 
    if (_v) {
      _wrap_wxHandleFatalExceptions__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxHandleFatalExceptions'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxInitialize__SWIG_1) {
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (bool)wxInitialize();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxInitialize) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_wxInitialize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_p_wxChar, 0) >= 0);
      }
      if (_v) {
        _wrap_wxInitialize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxInitialize'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWakeUpIdle) {
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  wxWakeUpIdle();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxYield) {
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (bool)wxYield();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxSafeYield__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxSafeYield. Expected SWIGTYPE_p_wxWindow");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)wxSafeYield(arg1,arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxSafeYield__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxSafeYield. Expected SWIGTYPE_p_wxWindow");
    }
  }
  result = (bool)wxSafeYield(arg1);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxSafeYield__SWIG_2) {
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (bool)wxSafeYield();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxSafeYield) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_wxSafeYield__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxSafeYield__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxSafeYield__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxSafeYield'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxEntry) {
  int arg1 ;
  wxChar **arg2 = (wxChar **) 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_p_wxChar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxEntry. Expected SWIGTYPE_p_p_wxChar");
    }
  }
  result = (int)wxEntry(arg1,arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxExit) {
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  wxExit();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxVisualAttributes_font_set) {
  wxVisualAttributes *arg1 = (wxVisualAttributes *) 0 ;
  wxFont arg2 ;
  wxFont *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxVisualAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxVisualAttributes_font_set. Expected SWIGTYPE_p_wxVisualAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxFont, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxVisualAttributes_font_set. Expected SWIGTYPE_p_wxFont");
    }
    arg2 = *tmp2;
  }
  if (arg1) (arg1)->font = arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxVisualAttributes_font_get) {
  wxVisualAttributes *arg1 = (wxVisualAttributes *) 0 ;
  zval **args[1];
  wxFont result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxVisualAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxVisualAttributes_font_get. Expected SWIGTYPE_p_wxVisualAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result =  ((arg1)->font);
  {
    wxFont * resultobj = new wxFont((const wxFont &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxFont, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxVisualAttributes_colFg_set) {
  wxVisualAttributes *arg1 = (wxVisualAttributes *) 0 ;
  wxColour arg2 ;
  wxColour *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxVisualAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxVisualAttributes_colFg_set. Expected SWIGTYPE_p_wxVisualAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxColour, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxVisualAttributes_colFg_set. Expected SWIGTYPE_p_wxColour");
    }
    arg2 = *tmp2;
  }
  if (arg1) (arg1)->colFg = arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxVisualAttributes_colFg_get) {
  wxVisualAttributes *arg1 = (wxVisualAttributes *) 0 ;
  zval **args[1];
  wxColour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxVisualAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxVisualAttributes_colFg_get. Expected SWIGTYPE_p_wxVisualAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result =  ((arg1)->colFg);
  {
    wxColour * resultobj = new wxColour((const wxColour &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxColour, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxVisualAttributes_colBg_set) {
  wxVisualAttributes *arg1 = (wxVisualAttributes *) 0 ;
  wxColour arg2 ;
  wxColour *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxVisualAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxVisualAttributes_colBg_set. Expected SWIGTYPE_p_wxVisualAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxColour, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxVisualAttributes_colBg_set. Expected SWIGTYPE_p_wxColour");
    }
    arg2 = *tmp2;
  }
  if (arg1) (arg1)->colBg = arg2;
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxVisualAttributes_colBg_get) {
  wxVisualAttributes *arg1 = (wxVisualAttributes *) 0 ;
  zval **args[1];
  wxColour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxVisualAttributes, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxVisualAttributes_colBg_get. Expected SWIGTYPE_p_wxVisualAttributes");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result =  ((arg1)->colBg);
  {
    wxColour * resultobj = new wxColour((const wxColour &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxColour, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxVisualAttributes) {
  wxVisualAttributes *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (wxVisualAttributes *)new wxVisualAttributes();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxVisualAttributes, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_wxVisualAttributes(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  wxVisualAttributes *arg1 = (wxVisualAttributes *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (wxVisualAttributes *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_wxVisualAttributes TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "wxVisualAttributes resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxWindow__SWIG_0) {
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (wxWindow *)new wxWindow();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxWindow__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxPoint *arg3 = 0 ;
  wxSize *arg4 = 0 ;
  long arg5 ;
  wxString *arg6 = 0 ;
  wxWindowID *tmp2 ;
  zval **args[6];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxWindow. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxPoint, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxWindow. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxSize, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_wxWindow. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (long) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_wxString, 0) < 0 || arg6 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of new_wxWindow. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxWindow *)new wxWindow(arg1,arg2,(wxPoint const &)*arg3,(wxSize const &)*arg4,arg5,(wxString const &)*arg6);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxWindow__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxPoint *arg3 = 0 ;
  wxSize *arg4 = 0 ;
  long arg5 ;
  wxWindowID *tmp2 ;
  zval **args[5];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxWindow. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxPoint, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxWindow. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxSize, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_wxWindow. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (long) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  result = (wxWindow *)new wxWindow(arg1,arg2,(wxPoint const &)*arg3,(wxSize const &)*arg4,arg5);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxWindow__SWIG_3) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxPoint *arg3 = 0 ;
  wxSize *arg4 = 0 ;
  wxWindowID *tmp2 ;
  zval **args[4];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxWindow. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxPoint, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxWindow. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxSize, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_wxWindow. Expected SWIGTYPE_p_wxSize");
    }
  }
  result = (wxWindow *)new wxWindow(arg1,arg2,(wxPoint const &)*arg3,(wxSize const &)*arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxWindow__SWIG_4) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxPoint *arg3 = 0 ;
  wxWindowID *tmp2 ;
  zval **args[3];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxWindow. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxPoint, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxWindow. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = (wxWindow *)new wxWindow(arg1,arg2,(wxPoint const &)*arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxWindow__SWIG_5) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxWindowID *tmp2 ;
  zval **args[2];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxWindow. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  result = (wxWindow *)new wxWindow(arg1,arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxWindow) {
  int argc;
  zval **argv[6];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_wxWindow__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        _wrap_new_wxWindow__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
        }
        if (_v) {
          _wrap_new_wxWindow__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
          }
          if (_v) {
            _wrap_new_wxWindow__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
          }
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _wrap_new_wxWindow__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
          }
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              {
                void *tmp;
                _v = (SWIG_ConvertPtr(*argv[5], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
              }
              if (_v) {
                _wrap_new_wxWindow__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_wxWindow'";
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_wxWindow(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  wxWindow *arg1 = (wxWindow *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (wxWindow *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_wxWindow TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "wxWindow resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Create__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxPoint *arg4 = 0 ;
  wxSize *arg5 = 0 ;
  long arg6 ;
  wxString *arg7 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[7];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxWindow_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxSize, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxWindow_Create. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (long) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[6], (void **) &arg7, SWIGTYPE_p_wxString, 0) < 0 || arg7 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 7 of wxWindow_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (bool)(arg1)->Create(arg2,arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6,(wxString const &)*arg7);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Create__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxPoint *arg4 = 0 ;
  wxSize *arg5 = 0 ;
  long arg6 ;
  wxWindowID *tmp3 ;
  zval **args[6];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxWindow_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxSize, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxWindow_Create. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (long) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->Create(arg2,arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Create__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxPoint *arg4 = 0 ;
  wxSize *arg5 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxWindow_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxSize, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxWindow_Create. Expected SWIGTYPE_p_wxSize");
    }
  }
  result = (bool)(arg1)->Create(arg2,arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Create__SWIG_3) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxPoint *arg4 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxWindow_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = (bool)(arg1)->Create(arg2,arg3,(wxPoint const &)*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Create__SWIG_4) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxWindowID *tmp3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  result = (bool)(arg1)->Create(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Create) {
  int argc;
  zval **argv[7];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_Create__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            _wrap_wxWindow_Create__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
            }
            if (_v) {
              _wrap_wxWindow_Create__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
            }
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                _wrap_wxWindow_Create__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
            }
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                {
                  void *tmp;
                  _v = (SWIG_ConvertPtr(*argv[6], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
                }
                if (_v) {
                  _wrap_wxWindow_Create__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_Create'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_AcceptsFocus) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_AcceptsFocus. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->AcceptsFocus();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_AcceptsFocusFromKeyboard) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_AcceptsFocusFromKeyboard. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->AcceptsFocusFromKeyboard();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_AcceptsFocusRecursively) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_AcceptsFocusRecursively. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->AcceptsFocusRecursively();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HasFocus) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HasFocus. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->HasFocus();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetCanFocus) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetCanFocus. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SetCanFocus(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetFocus) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetFocus. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->SetFocus();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetFocusFromKbd) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetFocusFromKbd. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->SetFocusFromKbd();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_AddChild) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_AddChild. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_AddChild. Expected SWIGTYPE_p_wxWindow");
    }
  }
  (arg1)->AddChild(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_DestroyChildren) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_DestroyChildren. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->DestroyChildren();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindow__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  long arg2 ;
  zval **args[2];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_FindWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (wxWindow *)((wxWindow const *)arg1)->FindWindow(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindow__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_FindWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_FindWindow. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxWindow *)((wxWindow const *)arg1)->FindWindow((wxString const &)*arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindow) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_FindWindow__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_FindWindow__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_FindWindow'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetChildren__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxWindowList *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetChildren. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxWindowList *) &(arg1)->GetChildren();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindowList, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetChildren__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxWindowList *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetChildren. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxWindowList *) &((wxWindow const *)arg1)->GetChildren();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindowList, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetChildren) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_GetChildren__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_GetChildren__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_GetChildren'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_RemoveChild) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_RemoveChild. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_RemoveChild. Expected SWIGTYPE_p_wxWindow");
    }
  }
  (arg1)->RemoveChild(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetGrandParent) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetGrandParent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxWindow *)((wxWindow const *)arg1)->GetGrandParent();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetNextSibling) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetNextSibling. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxWindow *)((wxWindow const *)arg1)->GetNextSibling();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetParent) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetParent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxWindow *)((wxWindow const *)arg1)->GetParent();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetPrevSibling) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetPrevSibling. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxWindow *)((wxWindow const *)arg1)->GetPrevSibling();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsDescendant) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowBase *arg2 = (wxWindowBase *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsDescendant. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindowBase, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_IsDescendant. Expected SWIGTYPE_p_wxWindowBase");
    }
  }
  result = (bool)((wxWindow const *)arg1)->IsDescendant(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Reparent) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Reparent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_Reparent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  result = (bool)(arg1)->Reparent(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_AlwaysShowScrollbars__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  bool arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_AlwaysShowScrollbars. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->AlwaysShowScrollbars(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_AlwaysShowScrollbars__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_AlwaysShowScrollbars. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->AlwaysShowScrollbars(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_AlwaysShowScrollbars__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_AlwaysShowScrollbars. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->AlwaysShowScrollbars();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_AlwaysShowScrollbars) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_AlwaysShowScrollbars__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxWindow_AlwaysShowScrollbars__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_wxWindow_AlwaysShowScrollbars__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_AlwaysShowScrollbars'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetScrollPos) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetScrollPos. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)((wxWindow const *)arg1)->GetScrollPos(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetScrollRange) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetScrollRange. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)((wxWindow const *)arg1)->GetScrollRange(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetScrollThumb) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetScrollThumb. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)((wxWindow const *)arg1)->GetScrollThumb(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_CanScroll) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_CanScroll. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)((wxWindow const *)arg1)->CanScroll(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HasScrollbar) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HasScrollbar. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)((wxWindow const *)arg1)->HasScrollbar(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsScrollbarAlwaysShown) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsScrollbarAlwaysShown. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)((wxWindow const *)arg1)->IsScrollbarAlwaysShown(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ScrollLines) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ScrollLines. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->ScrollLines(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ScrollPages) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ScrollPages. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->ScrollPages(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ScrollWindow__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  wxRect *arg4 = (wxRect *) 0 ;
  zval **args[4];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ScrollWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxRect, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxWindow_ScrollWindow. Expected SWIGTYPE_p_wxRect");
    }
  }
  (arg1)->ScrollWindow(arg2,arg3,(wxRect const *)arg4);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ScrollWindow__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ScrollWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->ScrollWindow(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ScrollWindow) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxWindow_ScrollWindow__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxRect, 0) >= 0);
          }
          if (_v) {
            _wrap_wxWindow_ScrollWindow__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_ScrollWindow'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_LineUp) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_LineUp. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->LineUp();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_LineDown) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_LineDown. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->LineDown();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PageUp) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_PageUp. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->PageUp();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PageDown) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_PageDown. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->PageDown();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetScrollPos__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  bool arg4 ;
  zval **args[4];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetScrollPos. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[3]);
  arg4 = (bool) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  (arg1)->SetScrollPos(arg2,arg3,arg4);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetScrollPos__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetScrollPos. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->SetScrollPos(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetScrollPos) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxWindow_SetScrollPos__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_BOOL); 
          if (_v) {
            _wrap_wxWindow_SetScrollPos__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SetScrollPos'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetScrollbar__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool arg6 ;
  zval **args[6];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetScrollbar. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[5]);
  arg6 = (bool) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  (arg1)->SetScrollbar(arg2,arg3,arg4,arg5,arg6);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetScrollbar__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  zval **args[5];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetScrollbar. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  (arg1)->SetScrollbar(arg2,arg3,arg4,arg5);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetScrollbar) {
  int argc;
  zval **argv[6];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _wrap_wxWindow_SetScrollbar__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_BOOL); 
              if (_v) {
                _wrap_wxWindow_SetScrollbar__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SetScrollbar'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_CacheBestSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_CacheBestSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_CacheBestSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  ((wxWindow const *)arg1)->CacheBestSize((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ClientToWindowSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ClientToWindowSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_ClientToWindowSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  result = ((wxWindow const *)arg1)->ClientToWindowSize((wxSize const &)*arg2);
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_WindowToClientSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_WindowToClientSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_WindowToClientSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  result = ((wxWindow const *)arg1)->WindowToClientSize((wxSize const &)*arg2);
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Fit) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Fit. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Fit();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FitInside) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_FitInside. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->FitInside();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetBestSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetBestSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetBestSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetBestHeight) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetBestHeight. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)((wxWindow const *)arg1)->GetBestHeight(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetBestWidth) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetBestWidth. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (int)((wxWindow const *)arg1)->GetBestWidth(arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetClientSize__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetClientSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetClientSize. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_GetClientSize. Expected SWIGTYPE_p_int");
    }
  }
  ((wxWindow const *)arg1)->GetClientSize(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetClientSize__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetClientSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetClientSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetClientSize) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_GetClientSize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_GetClientSize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_GetClientSize'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetEffectiveMinSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetEffectiveMinSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetEffectiveMinSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetMaxClientSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetMaxClientSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetMaxClientSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetMaxSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetMaxSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetMaxSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetMinClientSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetMinClientSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetMinClientSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetMinSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetMinSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetMinSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetMinWidth) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetMinWidth. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((wxWindow const *)arg1)->GetMinWidth();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetMinHeight) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetMinHeight. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((wxWindow const *)arg1)->GetMinHeight();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetMaxWidth) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetMaxWidth. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((wxWindow const *)arg1)->GetMaxWidth();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetMaxHeight) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetMaxHeight. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((wxWindow const *)arg1)->GetMaxHeight();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetSize__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetSize. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_GetSize. Expected SWIGTYPE_p_int");
    }
  }
  ((wxWindow const *)arg1)->GetSize(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetSize__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetSize) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_GetSize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_GetSize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_GetSize'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetVirtualSize__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetVirtualSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetVirtualSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetVirtualSize__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetVirtualSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetVirtualSize. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_GetVirtualSize. Expected SWIGTYPE_p_int");
    }
  }
  ((wxWindow const *)arg1)->GetVirtualSize(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetVirtualSize) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_GetVirtualSize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_GetVirtualSize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_GetVirtualSize'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetBestVirtualSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetBestVirtualSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetBestVirtualSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetWindowBorderSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetWindowBorderSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetWindowBorderSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_InformFirstDirection) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_InformFirstDirection. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->InformFirstDirection(arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_InvalidateBestSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_InvalidateBestSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->InvalidateBestSize();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PostSizeEvent) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_PostSizeEvent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->PostSizeEvent();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PostSizeEventToParent) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_PostSizeEventToParent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->PostSizeEventToParent();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SendSizeEvent__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SendSizeEvent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SendSizeEvent(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SendSizeEvent__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SendSizeEvent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->SendSizeEvent();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SendSizeEvent) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_SendSizeEvent__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_SendSizeEvent__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SendSizeEvent'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SendSizeEventToParent__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SendSizeEventToParent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SendSizeEventToParent(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SendSizeEventToParent__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SendSizeEventToParent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->SendSizeEventToParent();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SendSizeEventToParent) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_SendSizeEventToParent__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_SendSizeEventToParent__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SendSizeEventToParent'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetClientSize__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetClientSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->SetClientSize(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetClientSize__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetClientSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetClientSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetClientSize((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetClientSize__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxRect *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetClientSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxRect, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetClientSize. Expected SWIGTYPE_p_wxRect");
    }
  }
  (arg1)->SetClientSize((wxRect const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetClientSize) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_SetClientSize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxRect, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_SetClientSize__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxWindow_SetClientSize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SetClientSize'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetContainingSizer) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSizer *arg2 = (wxSizer *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetContainingSizer. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSizer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetContainingSizer. Expected SWIGTYPE_p_wxSizer");
    }
  }
  (arg1)->SetContainingSizer(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetInitialSize__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetInitialSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetInitialSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetInitialSize((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetInitialSize__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetInitialSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->SetInitialSize();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetInitialSize) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_SetInitialSize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_SetInitialSize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SetInitialSize'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetMaxClientSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetMaxClientSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetMaxClientSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetMaxClientSize((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetMaxSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetMaxSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetMaxSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetMaxSize((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetMinClientSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetMinClientSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetMinClientSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetMinClientSize((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetMinSize) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetMinSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetMinSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetMinSize((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSize__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  zval **args[6];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (int) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  (arg1)->SetSize(arg2,arg3,arg4,arg5,arg6);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSize__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  zval **args[5];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  (arg1)->SetSize(arg2,arg3,arg4,arg5);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSize__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxRect *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxRect, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetSize. Expected SWIGTYPE_p_wxRect");
    }
  }
  (arg1)->SetSize((wxRect const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSize__SWIG_3) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetSize((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSize__SWIG_4) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->SetSize(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSize) {
  int argc;
  zval **argv[6];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxRect, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_SetSize__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_SetSize__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxWindow_SetSize__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _wrap_wxWindow_SetSize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                _wrap_wxWindow_SetSize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SetSize'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizeHints__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  wxSize *arg3 = 0 ;
  wxSize *arg4 = 0 ;
  zval **args[4];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxSize, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxSize, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetSizeHints((wxSize const &)*arg2,(wxSize const &)*arg3,(wxSize const &)*arg4);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizeHints__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  wxSize *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxSize, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetSizeHints((wxSize const &)*arg2,(wxSize const &)*arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizeHints__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetSizeHints((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizeHints__SWIG_3) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  zval **args[7];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (int) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[6]);
  arg7 = (int) Z_LVAL_PP(args[6]);
  /*@SWIG@*/;
  
  (arg1)->SetSizeHints(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizeHints__SWIG_4) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  zval **args[6];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (int) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  (arg1)->SetSizeHints(arg2,arg3,arg4,arg5,arg6);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizeHints__SWIG_5) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  zval **args[5];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  (arg1)->SetSizeHints(arg2,arg3,arg4,arg5);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizeHints__SWIG_6) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  zval **args[4];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  (arg1)->SetSizeHints(arg2,arg3,arg4);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizeHints__SWIG_7) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizeHints. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->SetSizeHints(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizeHints) {
  int argc;
  zval **argv[7];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_SetSizeHints__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_SetSizeHints__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxWindow_SetSizeHints__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
          }
          if (_v) {
            _wrap_wxWindow_SetSizeHints__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_wxWindow_SetSizeHints__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _wrap_wxWindow_SetSizeHints__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                _wrap_wxWindow_SetSizeHints__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                _v = (Z_TYPE_PP(argv[6]) == IS_LONG); 
                if (_v) {
                  _wrap_wxWindow_SetSizeHints__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SetSizeHints'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetVirtualSize__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetVirtualSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->SetVirtualSize(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetVirtualSize__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetVirtualSize. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetVirtualSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetVirtualSize((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetVirtualSize) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_SetVirtualSize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxWindow_SetVirtualSize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SetVirtualSize'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Center__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Center. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->Center(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Center__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Center. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Center();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Center) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_Center__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_Center__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_Center'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_CenterOnParent__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_CenterOnParent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->CenterOnParent(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_CenterOnParent__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_CenterOnParent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->CenterOnParent();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_CenterOnParent) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_CenterOnParent__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_CenterOnParent__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_CenterOnParent'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Centre__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Centre. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->Centre(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Centre__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Centre. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Centre();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Centre) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_Centre__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_Centre__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_Centre'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_CentreOnParent__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_CentreOnParent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->CentreOnParent(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_CentreOnParent__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_CentreOnParent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->CentreOnParent();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_CentreOnParent) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_CentreOnParent__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_CentreOnParent__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_CentreOnParent'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetPosition__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetPosition. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetPosition. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_GetPosition. Expected SWIGTYPE_p_int");
    }
  }
  ((wxWindow const *)arg1)->GetPosition(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetPosition__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxPoint result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetPosition. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetPosition();
  {
    wxPoint * resultobj = new wxPoint((const wxPoint &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxPoint, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetPosition) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_GetPosition__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_GetPosition__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_GetPosition'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetRect) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxRect result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetRect. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetRect();
  {
    wxRect * resultobj = new wxRect((const wxRect &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxRect, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetScreenPosition__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetScreenPosition. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetScreenPosition. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_GetScreenPosition. Expected SWIGTYPE_p_int");
    }
  }
  ((wxWindow const *)arg1)->GetScreenPosition(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetScreenPosition__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxPoint result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetScreenPosition. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetScreenPosition();
  {
    wxPoint * resultobj = new wxPoint((const wxPoint &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxPoint, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetScreenPosition) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_GetScreenPosition__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_GetScreenPosition__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_GetScreenPosition'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetScreenRect) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxRect result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetScreenRect. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetScreenRect();
  {
    wxRect * resultobj = new wxRect((const wxRect &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxRect, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetClientAreaOrigin) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxPoint result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetClientAreaOrigin. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetClientAreaOrigin();
  {
    wxPoint * resultobj = new wxPoint((const wxPoint &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxPoint, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetClientRect) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxRect result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetClientRect. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetClientRect();
  {
    wxRect * resultobj = new wxRect((const wxRect &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxRect, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Move__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  zval **args[4];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Move. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  (arg1)->Move(arg2,arg3,arg4);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Move__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Move. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->Move(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Move__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxPoint *arg2 = 0 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Move. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxPoint, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_Move. Expected SWIGTYPE_p_wxPoint");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->Move((wxPoint const &)*arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Move__SWIG_3) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxPoint *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Move. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxPoint, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_Move. Expected SWIGTYPE_p_wxPoint");
    }
  }
  (arg1)->Move((wxPoint const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Move) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_Move__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxWindow_Move__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxWindow_Move__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_wxWindow_Move__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_Move'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetPosition) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxPoint *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetPosition. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxPoint, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetPosition. Expected SWIGTYPE_p_wxPoint");
    }
  }
  (arg1)->SetPosition((wxPoint const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ClientToScreen__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ClientToScreen. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_ClientToScreen. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_ClientToScreen. Expected SWIGTYPE_p_int");
    }
  }
  ((wxWindow const *)arg1)->ClientToScreen(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ClientToScreen__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxPoint *arg2 = 0 ;
  zval **args[2];
  wxPoint result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ClientToScreen. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxPoint, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_ClientToScreen. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = ((wxWindow const *)arg1)->ClientToScreen((wxPoint const &)*arg2);
  {
    wxPoint * resultobj = new wxPoint((const wxPoint &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxPoint, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ClientToScreen) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_ClientToScreen__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_ClientToScreen__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_ClientToScreen'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ConvertDialogToPixels__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxPoint *arg2 = 0 ;
  zval **args[2];
  wxPoint result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ConvertDialogToPixels. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxPoint, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_ConvertDialogToPixels. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = ((wxWindow const *)arg1)->ConvertDialogToPixels((wxPoint const &)*arg2);
  {
    wxPoint * resultobj = new wxPoint((const wxPoint &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxPoint, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ConvertDialogToPixels__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ConvertDialogToPixels. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_ConvertDialogToPixels. Expected SWIGTYPE_p_wxSize");
    }
  }
  result = ((wxWindow const *)arg1)->ConvertDialogToPixels((wxSize const &)*arg2);
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ConvertDialogToPixels) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_ConvertDialogToPixels__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_ConvertDialogToPixels__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_ConvertDialogToPixels'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ConvertPixelsToDialog__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxPoint *arg2 = 0 ;
  zval **args[2];
  wxPoint result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ConvertPixelsToDialog. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxPoint, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_ConvertPixelsToDialog. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = ((wxWindow const *)arg1)->ConvertPixelsToDialog((wxPoint const &)*arg2);
  {
    wxPoint * resultobj = new wxPoint((const wxPoint &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxPoint, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ConvertPixelsToDialog__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ConvertPixelsToDialog. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_ConvertPixelsToDialog. Expected SWIGTYPE_p_wxSize");
    }
  }
  result = ((wxWindow const *)arg1)->ConvertPixelsToDialog((wxSize const &)*arg2);
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ConvertPixelsToDialog) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_ConvertPixelsToDialog__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_ConvertPixelsToDialog__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_ConvertPixelsToDialog'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ScreenToClient__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ScreenToClient. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_ScreenToClient. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_ScreenToClient. Expected SWIGTYPE_p_int");
    }
  }
  ((wxWindow const *)arg1)->ScreenToClient(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ScreenToClient__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxPoint *arg2 = 0 ;
  zval **args[2];
  wxPoint result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ScreenToClient. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxPoint, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_ScreenToClient. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = ((wxWindow const *)arg1)->ScreenToClient((wxPoint const &)*arg2);
  {
    wxPoint * resultobj = new wxPoint((const wxPoint &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxPoint, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ScreenToClient) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_ScreenToClient__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_ScreenToClient__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_ScreenToClient'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ClearBackground) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ClearBackground. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->ClearBackground();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Freeze) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Freeze. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Freeze();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Thaw) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Thaw. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Thaw();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsFrozen) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsFrozen. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->IsFrozen();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetBackgroundColour) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxColour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetBackgroundColour. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetBackgroundColour();
  {
    wxColour * resultobj = new wxColour((const wxColour &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxColour, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetBackgroundStyle) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxBackgroundStyle result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetBackgroundStyle. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetBackgroundStyle();
  {
    wxBackgroundStyle * resultobj = new wxBackgroundStyle((const wxBackgroundStyle &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxBackgroundStyle, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetCharHeight) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetCharHeight. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((wxWindow const *)arg1)->GetCharHeight();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetCharWidth) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetCharWidth. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((wxWindow const *)arg1)->GetCharWidth();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetDefaultAttributes) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxVisualAttributes result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetDefaultAttributes. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetDefaultAttributes();
  {
    wxVisualAttributes * resultobj = new wxVisualAttributes((const wxVisualAttributes &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxVisualAttributes, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetFont) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxFont result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetFont. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetFont();
  {
    wxFont * resultobj = new wxFont((const wxFont &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxFont, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetForegroundColour) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxColour result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetForegroundColour. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetForegroundColour();
  {
    wxColour * resultobj = new wxColour((const wxColour &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxColour, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetTextExtent__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxString *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  wxFont *arg7 = (wxFont *) 0 ;
  zval **args[7];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[6], (void **) &arg7, SWIGTYPE_p_wxFont, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 7 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_wxFont");
    }
  }
  ((wxWindow const *)arg1)->GetTextExtent((wxString const &)*arg2,arg3,arg4,arg5,arg6,(wxFont const *)arg7);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetTextExtent__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxString *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  int *arg6 = (int *) 0 ;
  zval **args[6];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  ((wxWindow const *)arg1)->GetTextExtent((wxString const &)*arg2,arg3,arg4,arg5,arg6);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetTextExtent__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxString *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  int *arg5 = (int *) 0 ;
  zval **args[5];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  ((wxWindow const *)arg1)->GetTextExtent((wxString const &)*arg2,arg3,arg4,arg5);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetTextExtent__SWIG_3) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxString *arg2 = 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  zval **args[4];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_int");
    }
  }
  ((wxWindow const *)arg1)->GetTextExtent((wxString const &)*arg2,arg3,arg4);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetTextExtent__SWIG_4) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetTextExtent. Expected SWIGTYPE_p_wxString");
    }
  }
  result = ((wxWindow const *)arg1)->GetTextExtent((wxString const &)*arg2);
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetTextExtent) {
  int argc;
  zval **argv[7];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_GetTextExtent__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
          }
          if (_v) {
            _wrap_wxWindow_GetTextExtent__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
            }
            if (_v) {
              _wrap_wxWindow_GetTextExtent__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
            }
            if (_v) {
              {
                void *tmp;
                _v = (SWIG_ConvertPtr(*argv[5], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
              }
              if (_v) {
                _wrap_wxWindow_GetTextExtent__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
            }
            if (_v) {
              {
                void *tmp;
                _v = (SWIG_ConvertPtr(*argv[5], (void**)&tmp, SWIGTYPE_p_int, 0) >= 0);
              }
              if (_v) {
                {
                  void *tmp;
                  _v = (SWIG_ConvertPtr(*argv[6], (void**)&tmp, SWIGTYPE_p_wxFont, 0) >= 0);
                }
                if (_v) {
                  _wrap_wxWindow_GetTextExtent__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_GetTextExtent'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetUpdateRegion) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxRegion *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetUpdateRegion. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxRegion *) &((wxWindow const *)arg1)->GetUpdateRegion();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxRegion, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetUpdateClientRect) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxRect result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetUpdateClientRect. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetUpdateClientRect();
  {
    wxRect * resultobj = new wxRect((const wxRect &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxRect, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HasTransparentBackground) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HasTransparentBackground. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->HasTransparentBackground();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Refresh__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  wxRect *arg3 = (wxRect *) 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Refresh. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxRect, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_Refresh. Expected SWIGTYPE_p_wxRect");
    }
  }
  (arg1)->Refresh(arg2,(wxRect const *)arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Refresh__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Refresh. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->Refresh(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Refresh__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Refresh. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Refresh();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Refresh) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_Refresh__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxWindow_Refresh__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxRect, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_Refresh__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_Refresh'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_RefreshRect__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxRect *arg2 = 0 ;
  bool arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_RefreshRect. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxRect, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_RefreshRect. Expected SWIGTYPE_p_wxRect");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->RefreshRect((wxRect const &)*arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_RefreshRect__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxRect *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_RefreshRect. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxRect, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_RefreshRect. Expected SWIGTYPE_p_wxRect");
    }
  }
  (arg1)->RefreshRect((wxRect const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_RefreshRect) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxRect, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_RefreshRect__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxRect, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_wxWindow_RefreshRect__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_RefreshRect'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Update) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Update. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Update();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetBackgroundColour) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxColour *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetBackgroundColour. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxColour, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetBackgroundColour. Expected SWIGTYPE_p_wxColour");
    }
  }
  result = (bool)(arg1)->SetBackgroundColour((wxColour const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetBackgroundStyle) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxBackgroundStyle arg2 ;
  wxBackgroundStyle *tmp2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetBackgroundStyle. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxBackgroundStyle, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetBackgroundStyle. Expected SWIGTYPE_p_wxBackgroundStyle");
    }
    arg2 = *tmp2;
  }
  result = (bool)(arg1)->SetBackgroundStyle(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsTransparentBackgroundSupported__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxString *arg2 = (wxString *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsTransparentBackgroundSupported. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_IsTransparentBackgroundSupported. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (bool)((wxWindow const *)arg1)->IsTransparentBackgroundSupported(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsTransparentBackgroundSupported__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsTransparentBackgroundSupported. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->IsTransparentBackgroundSupported();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsTransparentBackgroundSupported) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_IsTransparentBackgroundSupported__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_IsTransparentBackgroundSupported__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_IsTransparentBackgroundSupported'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetFont) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxFont *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetFont. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxFont, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetFont. Expected SWIGTYPE_p_wxFont");
    }
  }
  result = (bool)(arg1)->SetFont((wxFont const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetForegroundColour) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxColour *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetForegroundColour. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxColour, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetForegroundColour. Expected SWIGTYPE_p_wxColour");
    }
  }
  result = (bool)(arg1)->SetForegroundColour((wxColour const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetOwnBackgroundColour) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxColour *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetOwnBackgroundColour. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxColour, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetOwnBackgroundColour. Expected SWIGTYPE_p_wxColour");
    }
  }
  (arg1)->SetOwnBackgroundColour((wxColour const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetOwnFont) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxFont *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetOwnFont. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxFont, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetOwnFont. Expected SWIGTYPE_p_wxFont");
    }
  }
  (arg1)->SetOwnFont((wxFont const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetOwnForegroundColour) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxColour *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetOwnForegroundColour. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxColour, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetOwnForegroundColour. Expected SWIGTYPE_p_wxColour");
    }
  }
  (arg1)->SetOwnForegroundColour((wxColour const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetPalette) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxPalette *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetPalette. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxPalette, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetPalette. Expected SWIGTYPE_p_wxPalette");
    }
  }
  (arg1)->SetPalette((wxPalette const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ShouldInheritColours) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ShouldInheritColours. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->ShouldInheritColours();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetThemeEnabled) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetThemeEnabled. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SetThemeEnabled(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetThemeEnabled) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetThemeEnabled. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->GetThemeEnabled();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_CanSetTransparent) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_CanSetTransparent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->CanSetTransparent();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetTransparent) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxByte arg2 ;
  wxByte *tmp2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetTransparent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxByte, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetTransparent. Expected SWIGTYPE_p_wxByte");
    }
    arg2 = *tmp2;
  }
  result = (bool)(arg1)->SetTransparent(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetEventHandler) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxEvtHandler *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetEventHandler. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxEvtHandler *)((wxWindow const *)arg1)->GetEventHandler();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxEvtHandler, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HandleAsNavigationKey) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxKeyEvent *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HandleAsNavigationKey. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxKeyEvent, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_HandleAsNavigationKey. Expected SWIGTYPE_p_wxKeyEvent");
    }
  }
  result = (bool)(arg1)->HandleAsNavigationKey((wxKeyEvent const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HandleWindowEvent) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxEvent *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HandleWindowEvent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEvent, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_HandleWindowEvent. Expected SWIGTYPE_p_wxEvent");
    }
  }
  result = (bool)((wxWindow const *)arg1)->HandleWindowEvent(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ProcessWindowEvent) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxEvent *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ProcessWindowEvent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEvent, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_ProcessWindowEvent. Expected SWIGTYPE_p_wxEvent");
    }
  }
  result = (bool)(arg1)->ProcessWindowEvent(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ProcessWindowEventLocally) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxEvent *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ProcessWindowEventLocally. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEvent, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_ProcessWindowEventLocally. Expected SWIGTYPE_p_wxEvent");
    }
  }
  result = (bool)(arg1)->ProcessWindowEventLocally(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PopEventHandler__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  wxEvtHandler *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_PopEventHandler. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (wxEvtHandler *)(arg1)->PopEventHandler(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxEvtHandler, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PopEventHandler__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxEvtHandler *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_PopEventHandler. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxEvtHandler *)(arg1)->PopEventHandler();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxEvtHandler, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PopEventHandler) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_PopEventHandler__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxWindow_PopEventHandler__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_PopEventHandler'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PushEventHandler) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxEvtHandler *arg2 = (wxEvtHandler *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_PushEventHandler. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEvtHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_PushEventHandler. Expected SWIGTYPE_p_wxEvtHandler");
    }
  }
  (arg1)->PushEventHandler(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_RemoveEventHandler) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxEvtHandler *arg2 = (wxEvtHandler *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_RemoveEventHandler. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEvtHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_RemoveEventHandler. Expected SWIGTYPE_p_wxEvtHandler");
    }
  }
  result = (bool)(arg1)->RemoveEventHandler(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetEventHandler) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxEvtHandler *arg2 = (wxEvtHandler *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetEventHandler. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEvtHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetEventHandler. Expected SWIGTYPE_p_wxEvtHandler");
    }
  }
  (arg1)->SetEventHandler(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetNextHandler) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxEvtHandler *arg2 = (wxEvtHandler *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetNextHandler. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEvtHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetNextHandler. Expected SWIGTYPE_p_wxEvtHandler");
    }
  }
  (arg1)->SetNextHandler(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetPreviousHandler) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxEvtHandler *arg2 = (wxEvtHandler *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetPreviousHandler. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxEvtHandler, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetPreviousHandler. Expected SWIGTYPE_p_wxEvtHandler");
    }
  }
  (arg1)->SetPreviousHandler(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetExtraStyle) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  long result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetExtraStyle. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (long)((wxWindow const *)arg1)->GetExtraStyle();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetWindowStyleFlag) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  long result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetWindowStyleFlag. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (long)((wxWindow const *)arg1)->GetWindowStyleFlag();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetWindowStyle) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  long result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetWindowStyle. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (long)((wxWindow const *)arg1)->GetWindowStyle();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HasExtraStyle) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HasExtraStyle. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)((wxWindow const *)arg1)->HasExtraStyle(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HasFlag) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HasFlag. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)((wxWindow const *)arg1)->HasFlag(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetExtraStyle) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  long arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetExtraStyle. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SetExtraStyle(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetWindowStyleFlag) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  long arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetWindowStyleFlag. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SetWindowStyleFlag(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetWindowStyle) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  long arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetWindowStyle. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SetWindowStyle(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ToggleWindowStyle) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ToggleWindowStyle. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->ToggleWindowStyle(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_MoveAfterInTabOrder) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_MoveAfterInTabOrder. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_MoveAfterInTabOrder. Expected SWIGTYPE_p_wxWindow");
    }
  }
  (arg1)->MoveAfterInTabOrder(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_MoveBeforeInTabOrder) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_MoveBeforeInTabOrder. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_MoveBeforeInTabOrder. Expected SWIGTYPE_p_wxWindow");
    }
  }
  (arg1)->MoveBeforeInTabOrder(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Navigate__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Navigate. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->Navigate(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Navigate__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Navigate. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->Navigate();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Navigate) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_Navigate__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_Navigate__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_Navigate'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_NavigateIn__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_NavigateIn. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->NavigateIn(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_NavigateIn__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_NavigateIn. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->NavigateIn();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_NavigateIn) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_NavigateIn__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_NavigateIn__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_NavigateIn'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Lower) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Lower. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Lower();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Raise) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Raise. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Raise();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Hide) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Hide. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->Hide();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HideWithEffect__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxShowEffect arg2 ;
  unsigned int arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HideWithEffect. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (wxShowEffect) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (unsigned int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->HideWithEffect(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HideWithEffect__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxShowEffect arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HideWithEffect. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (wxShowEffect) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->HideWithEffect(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HideWithEffect) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_HideWithEffect__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxWindow_HideWithEffect__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_HideWithEffect'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsEnabled) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsEnabled. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->IsEnabled();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsExposed__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsExposed. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (bool)((wxWindow const *)arg1)->IsExposed(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsExposed__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxPoint *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsExposed. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxPoint, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_IsExposed. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = (bool)((wxWindow const *)arg1)->IsExposed(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsExposed__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsExposed. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  result = (bool)((wxWindow const *)arg1)->IsExposed(arg2,arg3,arg4,arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsExposed__SWIG_3) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxRect *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsExposed. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxRect, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_IsExposed. Expected SWIGTYPE_p_wxRect");
    }
  }
  result = (bool)((wxWindow const *)arg1)->IsExposed(*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsExposed) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_IsExposed__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxRect, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_IsExposed__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxWindow_IsExposed__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _wrap_wxWindow_IsExposed__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_IsExposed'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsShown) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsShown. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->IsShown();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsShownOnScreen) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsShownOnScreen. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->IsShownOnScreen();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Disable) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Disable. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->Disable();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Enable__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Enable. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->Enable(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Enable__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Enable. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->Enable();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Enable) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_Enable__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxWindow_Enable__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_Enable'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Show__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Show. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->Show(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Show__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Show. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->Show();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Show) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_Show__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxWindow_Show__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_Show'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ShowWithEffect__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxShowEffect arg2 ;
  unsigned int arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ShowWithEffect. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (wxShowEffect) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (unsigned int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->ShowWithEffect(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ShowWithEffect__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxShowEffect arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ShowWithEffect. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (wxShowEffect) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->ShowWithEffect(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ShowWithEffect) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_ShowWithEffect__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxWindow_ShowWithEffect__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_ShowWithEffect'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetHelpText) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxString result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetHelpText. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetHelpText();
  {
    wxString * resultobj = new wxString((const wxString &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxString, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetHelpText) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetHelpText. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetHelpText. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetHelpText((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetHelpTextAtPoint) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxPoint *arg2 = 0 ;
  wxHelpEvent::Origin arg3 ;
  wxHelpEvent::Origin *tmp3 ;
  zval **args[3];
  wxString result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetHelpTextAtPoint. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxPoint, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetHelpTextAtPoint. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxHelpEvent__Origin, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_GetHelpTextAtPoint. Expected SWIGTYPE_p_wxHelpEvent__Origin");
    }
    arg3 = *tmp3;
  }
  result = ((wxWindow const *)arg1)->GetHelpTextAtPoint((wxPoint const &)*arg2,arg3);
  {
    wxString * resultobj = new wxString((const wxString &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxString, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetToolTip) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxToolTip *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetToolTip. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxToolTip *)((wxWindow const *)arg1)->GetToolTip();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxToolTip, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetToolTipText) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxString result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetToolTipText. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetToolTipText();
  {
    wxString * resultobj = new wxString((const wxString &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxString, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetToolTip__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetToolTip. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetToolTip. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetToolTip((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetToolTip__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxToolTip *arg2 = (wxToolTip *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetToolTip. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxToolTip, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetToolTip. Expected SWIGTYPE_p_wxToolTip");
    }
  }
  (arg1)->SetToolTip(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetToolTip) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_SetToolTip__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxToolTip, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_SetToolTip__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SetToolTip'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_UnsetToolTip) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_UnsetToolTip. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->UnsetToolTip();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetPopupMenuSelectionFromUser__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxMenu *arg2 = 0 ;
  wxPoint *arg3 = 0 ;
  zval **args[3];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetPopupMenuSelectionFromUser. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxMenu, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetPopupMenuSelectionFromUser. Expected SWIGTYPE_p_wxMenu");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxPoint, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_GetPopupMenuSelectionFromUser. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = (int)(arg1)->GetPopupMenuSelectionFromUser(*arg2,(wxPoint const &)*arg3);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetPopupMenuSelectionFromUser__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxMenu *arg2 = 0 ;
  zval **args[2];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetPopupMenuSelectionFromUser. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxMenu, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetPopupMenuSelectionFromUser. Expected SWIGTYPE_p_wxMenu");
    }
  }
  result = (int)(arg1)->GetPopupMenuSelectionFromUser(*arg2);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetPopupMenuSelectionFromUser__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxMenu *arg2 = 0 ;
  int arg3 ;
  int arg4 ;
  zval **args[4];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetPopupMenuSelectionFromUser. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxMenu, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_GetPopupMenuSelectionFromUser. Expected SWIGTYPE_p_wxMenu");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  result = (int)(arg1)->GetPopupMenuSelectionFromUser(*arg2,arg3,arg4);
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetPopupMenuSelectionFromUser) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxMenu, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_GetPopupMenuSelectionFromUser__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxMenu, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_GetPopupMenuSelectionFromUser__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxMenu, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_wxWindow_GetPopupMenuSelectionFromUser__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_GetPopupMenuSelectionFromUser'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PopupMenu__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxMenu *arg2 = (wxMenu *) 0 ;
  wxPoint *arg3 = 0 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_PopupMenu. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxMenu, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_PopupMenu. Expected SWIGTYPE_p_wxMenu");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxPoint, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_PopupMenu. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = (bool)(arg1)->PopupMenu(arg2,(wxPoint const &)*arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PopupMenu__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxMenu *arg2 = (wxMenu *) 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_PopupMenu. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxMenu, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_PopupMenu. Expected SWIGTYPE_p_wxMenu");
    }
  }
  result = (bool)(arg1)->PopupMenu(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PopupMenu__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxMenu *arg2 = (wxMenu *) 0 ;
  int arg3 ;
  int arg4 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_PopupMenu. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxMenu, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_PopupMenu. Expected SWIGTYPE_p_wxMenu");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->PopupMenu(arg2,arg3,arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_PopupMenu) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxMenu, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_PopupMenu__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxMenu, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_PopupMenu__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxMenu, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_wxWindow_PopupMenu__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_PopupMenu'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetValidator) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxValidator *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetValidator. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxValidator *)(arg1)->GetValidator();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxValidator, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetValidator) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxValidator *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetValidator. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxValidator, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetValidator. Expected SWIGTYPE_p_wxValidator");
    }
  }
  (arg1)->SetValidator((wxValidator const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_TransferDataFromWindow) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_TransferDataFromWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->TransferDataFromWindow();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_TransferDataToWindow) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_TransferDataToWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->TransferDataToWindow();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Validate) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Validate. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->Validate();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetId) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxWindowID result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetId. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetId();
  {
    wxWindowID * resultobj = new wxWindowID((const wxWindowID &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxWindowID, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetLabel) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxString result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetLabel. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetLabel();
  {
    wxString * resultobj = new wxString((const wxString &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxString, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetLayoutDirection) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxLayoutDirection result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetLayoutDirection. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetLayoutDirection();
  {
    wxLayoutDirection * resultobj = new wxLayoutDirection((const wxLayoutDirection &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxLayoutDirection, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetName) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxString result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetName. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetName();
  {
    wxString * resultobj = new wxString((const wxString &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxString, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetWindowVariant) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxWindowVariant result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetWindowVariant. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxWindowVariant)((wxWindow const *)arg1)->GetWindowVariant();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetId) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxWindowID *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetId. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetId. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  (arg1)->SetId(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetLabel) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetLabel. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetLabel. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetLabel((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetLayoutDirection) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxLayoutDirection arg2 ;
  wxLayoutDirection *tmp2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetLayoutDirection. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxLayoutDirection, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetLayoutDirection. Expected SWIGTYPE_p_wxLayoutDirection");
    }
    arg2 = *tmp2;
  }
  (arg1)->SetLayoutDirection(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetName) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetName. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetName. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetName((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetWindowVariant) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowVariant arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetWindowVariant. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (wxWindowVariant) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SetWindowVariant(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetAcceleratorTable) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxAcceleratorTable *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetAcceleratorTable. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxAcceleratorTable *)(arg1)->GetAcceleratorTable();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxAcceleratorTable, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetAcceleratorTable) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxAcceleratorTable *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetAcceleratorTable. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxAcceleratorTable, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetAcceleratorTable. Expected SWIGTYPE_p_wxAcceleratorTable");
    }
  }
  (arg1)->SetAcceleratorTable((wxAcceleratorTable const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Close__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Close. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->Close(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Close__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Close. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->Close();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Close) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_Close__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxWindow_Close__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_Close'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Destroy) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Destroy. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->Destroy();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsBeingDeleted) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsBeingDeleted. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->IsBeingDeleted();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetDropTarget) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxDropTarget *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetDropTarget. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxDropTarget *)((wxWindow const *)arg1)->GetDropTarget();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxDropTarget, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetDropTarget) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxDropTarget *arg2 = (wxDropTarget *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetDropTarget. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxDropTarget, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetDropTarget. Expected SWIGTYPE_p_wxDropTarget");
    }
  }
  (arg1)->SetDropTarget(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_DragAcceptFiles) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_DragAcceptFiles. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->DragAcceptFiles(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetContainingSizer) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSizer *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetContainingSizer. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxSizer *)((wxWindow const *)arg1)->GetContainingSizer();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxSizer, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetSizer) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxSizer *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetSizer. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxSizer *)((wxWindow const *)arg1)->GetSizer();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxSizer, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizer__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSizer *arg2 = (wxSizer *) 0 ;
  bool arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizer. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSizer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetSizer. Expected SWIGTYPE_p_wxSizer");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->SetSizer(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizer__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSizer *arg2 = (wxSizer *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizer. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSizer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetSizer. Expected SWIGTYPE_p_wxSizer");
    }
  }
  (arg1)->SetSizer(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizer) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSizer, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_SetSizer__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSizer, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_wxWindow_SetSizer__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SetSizer'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizerAndFit__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSizer *arg2 = (wxSizer *) 0 ;
  bool arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizerAndFit. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSizer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetSizerAndFit. Expected SWIGTYPE_p_wxSizer");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[2]);
  arg3 = (bool) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->SetSizerAndFit(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizerAndFit__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxSizer *arg2 = (wxSizer *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetSizerAndFit. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSizer, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetSizerAndFit. Expected SWIGTYPE_p_wxSizer");
    }
  }
  (arg1)->SetSizerAndFit(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetSizerAndFit) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSizer, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_SetSizerAndFit__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSizer, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_BOOL); 
        if (_v) {
          _wrap_wxWindow_SetSizerAndFit__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_SetSizerAndFit'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetConstraints) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxLayoutConstraints *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetConstraints. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxLayoutConstraints *)((wxWindow const *)arg1)->GetConstraints();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxLayoutConstraints, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetConstraints) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxLayoutConstraints *arg2 = (wxLayoutConstraints *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetConstraints. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxLayoutConstraints, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetConstraints. Expected SWIGTYPE_p_wxLayoutConstraints");
    }
  }
  (arg1)->SetConstraints(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_Layout) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_Layout. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->Layout();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetAutoLayout) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetAutoLayout. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SetAutoLayout(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetAutoLayout) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetAutoLayout. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->GetAutoLayout();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_CaptureMouse) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_CaptureMouse. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->CaptureMouse();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetCaret) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxCaret *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetCaret. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxCaret *)((wxWindow const *)arg1)->GetCaret();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxCaret, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetCursor) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxCursor *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetCursor. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxCursor *) &((wxWindow const *)arg1)->GetCursor();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxCursor, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HasCapture) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HasCapture. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->HasCapture();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_ReleaseMouse) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_ReleaseMouse. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->ReleaseMouse();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetCaret) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxCaret *arg2 = (wxCaret *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetCaret. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxCaret, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetCaret. Expected SWIGTYPE_p_wxCaret");
    }
  }
  (arg1)->SetCaret(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetCursor) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxCursor *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetCursor. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxCursor, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_SetCursor. Expected SWIGTYPE_p_wxCursor");
    }
  }
  result = (bool)(arg1)->SetCursor((wxCursor const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_WarpPointer) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_WarpPointer. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->WarpPointer(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HitTest__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxCoord arg2 ;
  wxCoord arg3 ;
  wxCoord *tmp2 ;
  wxCoord *tmp3 ;
  zval **args[3];
  wxHitTest result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HitTest. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxCoord, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_HitTest. Expected SWIGTYPE_p_wxCoord");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxCoord, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxWindow_HitTest. Expected SWIGTYPE_p_wxCoord");
    }
    arg3 = *tmp3;
  }
  result = ((wxWindow const *)arg1)->HitTest(arg2,arg3);
  {
    wxHitTest * resultobj = new wxHitTest((const wxHitTest &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxHitTest, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HitTest__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxPoint *arg2 = 0 ;
  zval **args[2];
  wxHitTest result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HitTest. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxPoint, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_HitTest. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = ((wxWindow const *)arg1)->HitTest((wxPoint const &)*arg2);
  {
    wxHitTest * resultobj = new wxHitTest((const wxHitTest &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxHitTest, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HitTest) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_HitTest__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxCoord, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxCoord, 0) >= 0);
        }
        if (_v) {
          _wrap_wxWindow_HitTest__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_HitTest'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetBorder__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  long arg2 ;
  zval **args[2];
  wxBorder result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetBorder. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = ((wxWindow const *)arg1)->GetBorder(arg2);
  {
    wxBorder * resultobj = new wxBorder((const wxBorder &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxBorder, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetBorder__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxBorder result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetBorder. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetBorder();
  {
    wxBorder * resultobj = new wxBorder((const wxBorder &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxBorder, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetBorder) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_GetBorder__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_GetBorder__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_GetBorder'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_DoUpdateWindowUI) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxUpdateUIEvent *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_DoUpdateWindowUI. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxUpdateUIEvent, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_DoUpdateWindowUI. Expected SWIGTYPE_p_wxUpdateUIEvent");
    }
  }
  (arg1)->DoUpdateWindowUI(*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetHandle) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  WXWidget result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_GetHandle. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxWindow const *)arg1)->GetHandle();
  {
    WXWidget * resultobj = new WXWidget((const WXWidget &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_WXWidget, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_HasMultiplePages) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_HasMultiplePages. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->HasMultiplePages();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_InheritAttributes) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_InheritAttributes. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->InheritAttributes();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_InitDialog) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_InitDialog. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->InitDialog();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsDoubleBuffered) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsDoubleBuffered. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->IsDoubleBuffered();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_SetDoubleBuffered) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_SetDoubleBuffered. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SetDoubleBuffered(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsRetained) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsRetained. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->IsRetained();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsThisEnabled) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsThisEnabled. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->IsThisEnabled();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_IsTopLevel) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_IsTopLevel. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxWindow const *)arg1)->IsTopLevel();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_OnInternalIdle) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_OnInternalIdle. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->OnInternalIdle();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_UpdateWindowUI__SWIG_0) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  long arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_UpdateWindowUI. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->UpdateWindowUI(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_UpdateWindowUI__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_UpdateWindowUI. Expected SWIGTYPE_p_wxWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->UpdateWindowUI();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_UpdateWindowUI) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_UpdateWindowUI__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_UpdateWindowUI__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_UpdateWindowUI'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetClassDefaultAttributes__SWIG_0) {
  wxWindowVariant arg1 ;
  zval **args[1];
  wxVisualAttributes result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (wxWindowVariant) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = wxWindow::GetClassDefaultAttributes(arg1);
  {
    wxVisualAttributes * resultobj = new wxVisualAttributes((const wxVisualAttributes &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxVisualAttributes, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetClassDefaultAttributes__SWIG_1) {
  wxVisualAttributes result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = wxWindow::GetClassDefaultAttributes();
  {
    wxVisualAttributes * resultobj = new wxVisualAttributes((const wxVisualAttributes &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxVisualAttributes, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetClassDefaultAttributes) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_wxWindow_GetClassDefaultAttributes__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_wxWindow_GetClassDefaultAttributes__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_GetClassDefaultAttributes'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindFocus) {
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (wxWindow *)wxWindow::FindFocus();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindowById__SWIG_0) {
  long arg1 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  zval **args[2];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (long) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_FindWindowById. Expected SWIGTYPE_p_wxWindow");
    }
  }
  result = (wxWindow *)wxWindow::FindWindowById(arg1,(wxWindow const *)arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindowById__SWIG_1) {
  long arg1 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (long) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = (wxWindow *)wxWindow::FindWindowById(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindowById) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_wxWindow_FindWindowById__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_FindWindowById__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_FindWindowById'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindowByLabel__SWIG_0) {
  wxString *arg1 = 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  zval **args[2];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxString, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_FindWindowByLabel. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_FindWindowByLabel. Expected SWIGTYPE_p_wxWindow");
    }
  }
  result = (wxWindow *)wxWindow::FindWindowByLabel((wxString const &)*arg1,(wxWindow const *)arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindowByLabel__SWIG_1) {
  wxString *arg1 = 0 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxString, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_FindWindowByLabel. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxWindow *)wxWindow::FindWindowByLabel((wxString const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindowByLabel) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_FindWindowByLabel__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_FindWindowByLabel__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_FindWindowByLabel'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindowByName__SWIG_0) {
  wxString *arg1 = 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  zval **args[2];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxString, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_FindWindowByName. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxWindow_FindWindowByName. Expected SWIGTYPE_p_wxWindow");
    }
  }
  result = (wxWindow *)wxWindow::FindWindowByName((wxString const &)*arg1,(wxWindow const *)arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindowByName__SWIG_1) {
  wxString *arg1 = 0 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxString, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_FindWindowByName. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxWindow *)wxWindow::FindWindowByName((wxString const &)*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_FindWindowByName) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_FindWindowByName__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        _wrap_wxWindow_FindWindowByName__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_FindWindowByName'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_GetCapture) {
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (wxWindow *)wxWindow::GetCapture();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_NewControlId__SWIG_0) {
  int arg1 ;
  zval **args[1];
  wxWindowID result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[0]);
  arg1 = (int) Z_LVAL_PP(args[0]);
  /*@SWIG@*/;
  
  result = wxWindow::NewControlId(arg1);
  {
    wxWindowID * resultobj = new wxWindowID((const wxWindowID &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxWindowID, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_NewControlId__SWIG_1) {
  wxWindowID result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = wxWindow::NewControlId();
  {
    wxWindowID * resultobj = new wxWindowID((const wxWindowID &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxWindowID, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_NewControlId) {
  int argc;
  zval **argv[1];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_wxWindow_NewControlId__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 1) {
    int _v;
    _v = (Z_TYPE_PP(argv[0]) == IS_LONG); 
    if (_v) {
      _wrap_wxWindow_NewControlId__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_NewControlId'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_UnreserveControlId__SWIG_0) {
  wxWindowID arg1 ;
  int arg2 ;
  wxWindowID *tmp1 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_UnreserveControlId. Expected SWIGTYPE_p_wxWindowID");
    }
    arg1 = *tmp1;
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  wxWindow::UnreserveControlId(arg1,arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_UnreserveControlId__SWIG_1) {
  wxWindowID arg1 ;
  wxWindowID *tmp1 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &tmp1, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxWindow_UnreserveControlId. Expected SWIGTYPE_p_wxWindowID");
    }
    arg1 = *tmp1;
  }
  wxWindow::UnreserveControlId(arg1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxWindow_UnreserveControlId) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
    }
    if (_v) {
      _wrap_wxWindow_UnreserveControlId__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxWindow_UnreserveControlId__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxWindow_UnreserveControlId'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFindWindowAtPointer) {
  wxPoint *arg1 = 0 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxPoint, 0) < 0 || arg1 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFindWindowAtPointer. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = (wxWindow *)wxFindWindowAtPointer(*arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxGetActiveWindow) {
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (wxWindow *)wxGetActiveWindow();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxGetTopLevelParent) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxGetTopLevelParent. Expected SWIGTYPE_p_wxWindow");
    }
  }
  result = (wxWindow *)wxGetTopLevelParent(arg1);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxNonOwnedWindow_SetShape__SWIG_0) {
  wxNonOwnedWindow *arg1 = (wxNonOwnedWindow *) 0 ;
  wxRegion *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxNonOwnedWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxNonOwnedWindow_SetShape. Expected SWIGTYPE_p_wxNonOwnedWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxRegion, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxNonOwnedWindow_SetShape. Expected SWIGTYPE_p_wxRegion");
    }
  }
  result = (bool)(arg1)->SetShape((wxRegion const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxNonOwnedWindow_SetShape__SWIG_1) {
  wxNonOwnedWindow *arg1 = (wxNonOwnedWindow *) 0 ;
  wxGraphicsPath *arg2 = 0 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxNonOwnedWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxNonOwnedWindow_SetShape. Expected SWIGTYPE_p_wxNonOwnedWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxGraphicsPath, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxNonOwnedWindow_SetShape. Expected SWIGTYPE_p_wxGraphicsPath");
    }
  }
  result = (bool)(arg1)->SetShape((wxGraphicsPath const &)*arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxNonOwnedWindow_SetShape) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxNonOwnedWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxRegion, 0) >= 0);
      }
      if (_v) {
        _wrap_wxNonOwnedWindow_SetShape__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxNonOwnedWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxGraphicsPath, 0) >= 0);
      }
      if (_v) {
        _wrap_wxNonOwnedWindow_SetShape__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxNonOwnedWindow_SetShape'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxNonOwnedWindow) {
  wxNonOwnedWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (wxNonOwnedWindow *)new wxNonOwnedWindow();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxNonOwnedWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_wxNonOwnedWindow(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  wxNonOwnedWindow *arg1 = (wxNonOwnedWindow *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (wxNonOwnedWindow *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_wxNonOwnedWindow TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "wxNonOwnedWindow resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxTopLevelWindow__SWIG_0) {
  wxTopLevelWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (wxTopLevelWindow *)new wxTopLevelWindow();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxTopLevelWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxTopLevelWindow__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  wxSize *arg5 = 0 ;
  long arg6 ;
  wxString *arg7 = 0 ;
  wxWindowID *tmp2 ;
  zval **args[7];
  wxTopLevelWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxString, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxSize, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (long) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[6], (void **) &arg7, SWIGTYPE_p_wxString, 0) < 0 || arg7 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 7 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxTopLevelWindow *)new wxTopLevelWindow(arg1,arg2,(wxString const &)*arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6,(wxString const &)*arg7);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxTopLevelWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxTopLevelWindow__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  wxSize *arg5 = 0 ;
  long arg6 ;
  wxWindowID *tmp2 ;
  zval **args[6];
  wxTopLevelWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxString, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxSize, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (long) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  result = (wxTopLevelWindow *)new wxTopLevelWindow(arg1,arg2,(wxString const &)*arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxTopLevelWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxTopLevelWindow__SWIG_3) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  wxSize *arg5 = 0 ;
  wxWindowID *tmp2 ;
  zval **args[5];
  wxTopLevelWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxString, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxSize, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxSize");
    }
  }
  result = (wxTopLevelWindow *)new wxTopLevelWindow(arg1,arg2,(wxString const &)*arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxTopLevelWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxTopLevelWindow__SWIG_4) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  wxWindowID *tmp2 ;
  zval **args[4];
  wxTopLevelWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxString, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = (wxTopLevelWindow *)new wxTopLevelWindow(arg1,arg2,(wxString const &)*arg3,(wxPoint const &)*arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxTopLevelWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxTopLevelWindow__SWIG_5) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxString *arg3 = 0 ;
  wxWindowID *tmp2 ;
  zval **args[3];
  wxTopLevelWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxString, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxTopLevelWindow. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxTopLevelWindow *)new wxTopLevelWindow(arg1,arg2,(wxString const &)*arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxTopLevelWindow, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxTopLevelWindow) {
  int argc;
  zval **argv[7];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_wxTopLevelWindow__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
        }
        if (_v) {
          _wrap_new_wxTopLevelWindow__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            _wrap_new_wxTopLevelWindow__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
            }
            if (_v) {
              _wrap_new_wxTopLevelWindow__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
            }
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                _wrap_new_wxTopLevelWindow__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
            }
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                {
                  void *tmp;
                  _v = (SWIG_ConvertPtr(*argv[6], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
                }
                if (_v) {
                  _wrap_new_wxTopLevelWindow__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_wxTopLevelWindow'";
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_wxTopLevelWindow(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (wxTopLevelWindow *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_wxTopLevelWindow TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "wxTopLevelWindow resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Create__SWIG_0) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxPoint *arg5 = 0 ;
  wxSize *arg6 = 0 ;
  long arg7 ;
  wxString *arg8 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[8];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 8 || zend_get_parameters_array_ex(8, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxPoint, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_wxSize, 0) < 0 || arg6 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[6]);
  arg7 = (long) Z_LVAL_PP(args[6]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[7], (void **) &arg8, SWIGTYPE_p_wxString, 0) < 0 || arg8 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 8 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (bool)(arg1)->Create(arg2,arg3,(wxString const &)*arg4,(wxPoint const &)*arg5,(wxSize const &)*arg6,arg7,(wxString const &)*arg8);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Create__SWIG_1) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxPoint *arg5 = 0 ;
  wxSize *arg6 = 0 ;
  long arg7 ;
  wxWindowID *tmp3 ;
  zval **args[7];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxPoint, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_wxSize, 0) < 0 || arg6 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[6]);
  arg7 = (long) Z_LVAL_PP(args[6]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->Create(arg2,arg3,(wxString const &)*arg4,(wxPoint const &)*arg5,(wxSize const &)*arg6,arg7);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Create__SWIG_2) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxPoint *arg5 = 0 ;
  wxSize *arg6 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[6];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxPoint, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_wxSize, 0) < 0 || arg6 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxSize");
    }
  }
  result = (bool)(arg1)->Create(arg2,arg3,(wxString const &)*arg4,(wxPoint const &)*arg5,(wxSize const &)*arg6);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Create__SWIG_3) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxPoint *arg5 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxPoint, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = (bool)(arg1)->Create(arg2,arg3,(wxString const &)*arg4,(wxPoint const &)*arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Create__SWIG_4) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxTopLevelWindow_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (bool)(arg1)->Create(arg2,arg3,(wxString const &)*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Create) {
  int argc;
  zval **argv[8];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
          }
          if (_v) {
            _wrap_wxTopLevelWindow_Create__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
            }
            if (_v) {
              _wrap_wxTopLevelWindow_Create__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
            }
            if (_v) {
              {
                void *tmp;
                _v = (SWIG_ConvertPtr(*argv[5], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
              }
              if (_v) {
                _wrap_wxTopLevelWindow_Create__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
            }
            if (_v) {
              {
                void *tmp;
                _v = (SWIG_ConvertPtr(*argv[5], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
              }
              if (_v) {
                _v = (Z_TYPE_PP(argv[6]) == IS_LONG); 
                if (_v) {
                  _wrap_wxTopLevelWindow_Create__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
            }
            if (_v) {
              {
                void *tmp;
                _v = (SWIG_ConvertPtr(*argv[5], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
              }
              if (_v) {
                _v = (Z_TYPE_PP(argv[6]) == IS_LONG); 
                if (_v) {
                  {
                    void *tmp;
                    _v = (SWIG_ConvertPtr(*argv[7], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
                  }
                  if (_v) {
                    _wrap_wxTopLevelWindow_Create__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxTopLevelWindow_Create'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_CanSetTransparent) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_CanSetTransparent. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->CanSetTransparent();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_CenterOnScreen) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_CenterOnScreen. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->CenterOnScreen(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_CentreOnScreen__SWIG_0) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_CentreOnScreen. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->CentreOnScreen(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_CentreOnScreen__SWIG_1) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_CentreOnScreen. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->CentreOnScreen();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_CentreOnScreen) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxTopLevelWindow_CentreOnScreen__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxTopLevelWindow_CentreOnScreen__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxTopLevelWindow_CentreOnScreen'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_EnableCloseButton__SWIG_0) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_EnableCloseButton. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->EnableCloseButton(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_EnableCloseButton__SWIG_1) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_EnableCloseButton. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->EnableCloseButton();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_EnableCloseButton) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxTopLevelWindow_EnableCloseButton__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxTopLevelWindow_EnableCloseButton__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxTopLevelWindow_EnableCloseButton'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_GetDefaultItem) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_GetDefaultItem. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxWindow *)((wxTopLevelWindow const *)arg1)->GetDefaultItem();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_GetDefaultSize) {
  wxSize result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = wxTopLevelWindow::GetDefaultSize();
  {
    wxSize * resultobj = new wxSize((const wxSize &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxSize, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_GetIcon) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  wxIcon result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_GetIcon. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxTopLevelWindow const *)arg1)->GetIcon();
  {
    wxIcon * resultobj = new wxIcon((const wxIcon &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxIcon, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_GetIcons) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  wxIconBundle *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_GetIcons. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxIconBundle *) &((wxTopLevelWindow const *)arg1)->GetIcons();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxIconBundle, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_GetTitle) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  wxString result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_GetTitle. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxTopLevelWindow const *)arg1)->GetTitle();
  {
    wxString * resultobj = new wxString((const wxString &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxString, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Iconize__SWIG_0) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_Iconize. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->Iconize(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Iconize__SWIG_1) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_Iconize. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Iconize();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Iconize) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxTopLevelWindow_Iconize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxTopLevelWindow_Iconize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxTopLevelWindow_Iconize'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_IsActive) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_IsActive. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->IsActive();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_IsAlwaysMaximized) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_IsAlwaysMaximized. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxTopLevelWindow const *)arg1)->IsAlwaysMaximized();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_IsFullScreen) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_IsFullScreen. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxTopLevelWindow const *)arg1)->IsFullScreen();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_IsIconized) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_IsIconized. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxTopLevelWindow const *)arg1)->IsIconized();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_IsMaximized) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_IsMaximized. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxTopLevelWindow const *)arg1)->IsMaximized();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Layout) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_Layout. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)(arg1)->Layout();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Maximize__SWIG_0) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_Maximize. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->Maximize(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Maximize__SWIG_1) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_Maximize. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Maximize();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_Maximize) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxTopLevelWindow_Maximize__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxTopLevelWindow_Maximize__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxTopLevelWindow_Maximize'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_RequestUserAttention__SWIG_0) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_RequestUserAttention. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->RequestUserAttention(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_RequestUserAttention__SWIG_1) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_RequestUserAttention. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->RequestUserAttention();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_RequestUserAttention) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _wrap_wxTopLevelWindow_RequestUserAttention__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxTopLevelWindow_RequestUserAttention__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxTopLevelWindow_RequestUserAttention'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetDefaultItem) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  zval **args[2];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetDefaultItem. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetDefaultItem. Expected SWIGTYPE_p_wxWindow");
    }
  }
  result = (wxWindow *)(arg1)->SetDefaultItem(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetTmpDefaultItem) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  zval **args[2];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetTmpDefaultItem. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetTmpDefaultItem. Expected SWIGTYPE_p_wxWindow");
    }
  }
  result = (wxWindow *)(arg1)->SetTmpDefaultItem(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_GetTmpDefaultItem) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  wxWindow *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_GetTmpDefaultItem. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxWindow *)((wxTopLevelWindow const *)arg1)->GetTmpDefaultItem();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxWindow, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetIcon) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxIcon *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetIcon. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxIcon, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetIcon. Expected SWIGTYPE_p_wxIcon");
    }
  }
  (arg1)->SetIcon((wxIcon const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetIcons) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxIconBundle *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetIcons. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxIconBundle, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetIcons. Expected SWIGTYPE_p_wxIconBundle");
    }
  }
  (arg1)->SetIcons((wxIconBundle const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetMaxSize) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetMaxSize. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetMaxSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetMaxSize((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetMinSize) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetMinSize. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetMinSize. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetMinSize((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetSizeHints__SWIG_0) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  zval **args[7];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (int) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[6]);
  arg7 = (int) Z_LVAL_PP(args[6]);
  /*@SWIG@*/;
  
  (arg1)->SetSizeHints(arg2,arg3,arg4,arg5,arg6,arg7);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetSizeHints__SWIG_1) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  zval **args[6];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (int) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  (arg1)->SetSizeHints(arg2,arg3,arg4,arg5,arg6);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetSizeHints__SWIG_2) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  zval **args[5];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[4]);
  arg5 = (int) Z_LVAL_PP(args[4]);
  /*@SWIG@*/;
  
  (arg1)->SetSizeHints(arg2,arg3,arg4,arg5);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetSizeHints__SWIG_3) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  zval **args[4];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[3]);
  arg4 = (int) Z_LVAL_PP(args[3]);
  /*@SWIG@*/;
  
  (arg1)->SetSizeHints(arg2,arg3,arg4);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetSizeHints__SWIG_4) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  int arg2 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->SetSizeHints(arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetSizeHints__SWIG_5) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxSize *arg2 = 0 ;
  wxSize *arg3 = 0 ;
  wxSize *arg4 = 0 ;
  zval **args[4];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxSize, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxSize, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetSizeHints((wxSize const &)*arg2,(wxSize const &)*arg3,(wxSize const &)*arg4);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetSizeHints__SWIG_6) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxSize *arg2 = 0 ;
  wxSize *arg3 = 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxSize, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetSizeHints((wxSize const &)*arg2,(wxSize const &)*arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetSizeHints__SWIG_7) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxSize *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxSize, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetSizeHints. Expected SWIGTYPE_p_wxSize");
    }
  }
  (arg1)->SetSizeHints((wxSize const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetSizeHints) {
  int argc;
  zval **argv[7];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        _wrap_wxTopLevelWindow_SetSizeHints__SWIG_7(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
        }
        if (_v) {
          _wrap_wxTopLevelWindow_SetSizeHints__SWIG_6(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxTopLevelWindow_SetSizeHints__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
          }
          if (_v) {
            _wrap_wxTopLevelWindow_SetSizeHints__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _wrap_wxTopLevelWindow_SetSizeHints__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _wrap_wxTopLevelWindow_SetSizeHints__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                _wrap_wxTopLevelWindow_SetSizeHints__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _v = (Z_TYPE_PP(argv[3]) == IS_LONG); 
          if (_v) {
            _v = (Z_TYPE_PP(argv[4]) == IS_LONG); 
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                _v = (Z_TYPE_PP(argv[6]) == IS_LONG); 
                if (_v) {
                  _wrap_wxTopLevelWindow_SetSizeHints__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxTopLevelWindow_SetSizeHints'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetTitle) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetTitle. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetTitle. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetTitle((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetTransparent) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxByte arg2 ;
  wxByte *tmp2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetTransparent. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxByte, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetTransparent. Expected SWIGTYPE_p_wxByte");
    }
    arg2 = *tmp2;
  }
  result = (bool)(arg1)->SetTransparent(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_ShouldPreventAppExit) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_ShouldPreventAppExit. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxTopLevelWindow const *)arg1)->ShouldPreventAppExit();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_OSXSetModified) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_OSXSetModified. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->OSXSetModified(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_OSXIsModified) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  zval **args[1];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_OSXIsModified. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (bool)((wxTopLevelWindow const *)arg1)->OSXIsModified();
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_SetRepresentedFilename) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_SetRepresentedFilename. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxTopLevelWindow_SetRepresentedFilename. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetRepresentedFilename((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_ShowFullScreen__SWIG_0) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  bool arg2 ;
  long arg3 ;
  zval **args[3];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_ShowFullScreen. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (long) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->ShowFullScreen(arg2,arg3);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_ShowFullScreen__SWIG_1) {
  wxTopLevelWindow *arg1 = (wxTopLevelWindow *) 0 ;
  bool arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxTopLevelWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxTopLevelWindow_ShowFullScreen. Expected SWIGTYPE_p_wxTopLevelWindow");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,2,CONVERT_BOOL_IN@*/
  convert_to_boolean_ex(args[1]);
  arg2 = (bool) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->ShowFullScreen(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxTopLevelWindow_ShowFullScreen) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _wrap_wxTopLevelWindow_ShowFullScreen__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxTopLevelWindow, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_BOOL); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxTopLevelWindow_ShowFullScreen__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxTopLevelWindow_ShowFullScreen'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxFrame__SWIG_0) {
  wxFrame *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 0) {
    WRONG_PARAM_COUNT;
  }
  
  result = (wxFrame *)new wxFrame();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxFrame, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxFrame__SWIG_1) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  wxSize *arg5 = 0 ;
  long arg6 ;
  wxString *arg7 = 0 ;
  wxWindowID *tmp2 ;
  zval **args[7];
  wxFrame *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxFrame. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxFrame. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxString, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxFrame. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_wxFrame. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxSize, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of new_wxFrame. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (long) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[6], (void **) &arg7, SWIGTYPE_p_wxString, 0) < 0 || arg7 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 7 of new_wxFrame. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxFrame *)new wxFrame(arg1,arg2,(wxString const &)*arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6,(wxString const &)*arg7);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxFrame, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxFrame__SWIG_2) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  wxSize *arg5 = 0 ;
  long arg6 ;
  wxWindowID *tmp2 ;
  zval **args[6];
  wxFrame *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxFrame. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxFrame. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxString, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxFrame. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_wxFrame. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxSize, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of new_wxFrame. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[5]);
  arg6 = (long) Z_LVAL_PP(args[5]);
  /*@SWIG@*/;
  
  result = (wxFrame *)new wxFrame(arg1,arg2,(wxString const &)*arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5,arg6);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxFrame, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxFrame__SWIG_3) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  wxSize *arg5 = 0 ;
  wxWindowID *tmp2 ;
  zval **args[5];
  wxFrame *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxFrame. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxFrame. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxString, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxFrame. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_wxFrame. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxSize, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of new_wxFrame. Expected SWIGTYPE_p_wxSize");
    }
  }
  result = (wxFrame *)new wxFrame(arg1,arg2,(wxString const &)*arg3,(wxPoint const &)*arg4,(wxSize const &)*arg5);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxFrame, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxFrame__SWIG_4) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxString *arg3 = 0 ;
  wxPoint *arg4 = 0 ;
  wxWindowID *tmp2 ;
  zval **args[4];
  wxFrame *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxFrame. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxFrame. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxString, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxFrame. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxPoint, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of new_wxFrame. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = (wxFrame *)new wxFrame(arg1,arg2,(wxString const &)*arg3,(wxPoint const &)*arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxFrame, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxFrame__SWIG_5) {
  wxWindow *arg1 = (wxWindow *) 0 ;
  wxWindowID arg2 ;
  wxString *arg3 = 0 ;
  wxWindowID *tmp2 ;
  zval **args[3];
  wxFrame *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of new_wxFrame. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &tmp2, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of new_wxFrame. Expected SWIGTYPE_p_wxWindowID");
    }
    arg2 = *tmp2;
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_wxString, 0) < 0 || arg3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of new_wxFrame. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxFrame *)new wxFrame(arg1,arg2,(wxString const &)*arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxFrame, 1);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_new_wxFrame) {
  int argc;
  zval **argv[7];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 0) {
    _wrap_new_wxFrame__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
        }
        if (_v) {
          _wrap_new_wxFrame__SWIG_5(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            _wrap_new_wxFrame__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
            }
            if (_v) {
              _wrap_new_wxFrame__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
            }
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                _wrap_new_wxFrame__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
            }
            if (_v) {
              _v = (Z_TYPE_PP(argv[5]) == IS_LONG); 
              if (_v) {
                {
                  void *tmp;
                  _v = (SWIG_ConvertPtr(*argv[6], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
                }
                if (_v) {
                  _wrap_new_wxFrame__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'new_wxFrame'";
  SWIG_FAIL();
}


/* This function is designed to be called by the zend list destructors */
/* to typecast and do the actual destruction */
static void __wrap_delete_wxFrame(zend_rsrc_list_entry *rsrc, const char *type_name TSRMLS_DC) {
  swig_object_wrapper *value=(swig_object_wrapper *) rsrc->ptr ;
  void *ptr=value->ptr ;
  int newobject=value->newobject ;
  wxFrame *arg1 = (wxFrame *) 0 ;
  
  efree(value);
  if (! newobject) return; /* can't delete it! */
  arg1 = (wxFrame *)SWIG_ZTS_ConvertResourceData(ptr,type_name,SWIGTYPE_p_wxFrame TSRMLS_CC);
  if (! arg1) zend_error(E_ERROR, "wxFrame resource already free'd");
  delete arg1;
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_Centre__SWIG_0) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_Centre. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->Centre(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_Centre__SWIG_1) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_Centre. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->Centre();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_Centre) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _wrap_wxFrame_Centre__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxFrame_Centre__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxFrame_Centre'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_Create__SWIG_0) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxPoint *arg5 = 0 ;
  wxSize *arg6 = 0 ;
  long arg7 ;
  wxString *arg8 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[8];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 8 || zend_get_parameters_array_ex(8, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_Create. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxFrame_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxFrame_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxPoint, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxFrame_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_wxSize, 0) < 0 || arg6 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of wxFrame_Create. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[6]);
  arg7 = (long) Z_LVAL_PP(args[6]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[7], (void **) &arg8, SWIGTYPE_p_wxString, 0) < 0 || arg8 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 8 of wxFrame_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (bool)(arg1)->Create(arg2,arg3,(wxString const &)*arg4,(wxPoint const &)*arg5,(wxSize const &)*arg6,arg7,(wxString const &)*arg8);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_Create__SWIG_1) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxPoint *arg5 = 0 ;
  wxSize *arg6 = 0 ;
  long arg7 ;
  wxWindowID *tmp3 ;
  zval **args[7];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 7 || zend_get_parameters_array_ex(7, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_Create. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxFrame_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxFrame_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxPoint, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxFrame_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_wxSize, 0) < 0 || arg6 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of wxFrame_Create. Expected SWIGTYPE_p_wxSize");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[6]);
  arg7 = (long) Z_LVAL_PP(args[6]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->Create(arg2,arg3,(wxString const &)*arg4,(wxPoint const &)*arg5,(wxSize const &)*arg6,arg7);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_Create__SWIG_2) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxPoint *arg5 = 0 ;
  wxSize *arg6 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[6];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 6 || zend_get_parameters_array_ex(6, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_Create. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxFrame_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxFrame_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxPoint, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxFrame_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[5], (void **) &arg6, SWIGTYPE_p_wxSize, 0) < 0 || arg6 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 6 of wxFrame_Create. Expected SWIGTYPE_p_wxSize");
    }
  }
  result = (bool)(arg1)->Create(arg2,arg3,(wxString const &)*arg4,(wxPoint const &)*arg5,(wxSize const &)*arg6);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_Create__SWIG_3) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxPoint *arg5 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[5];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_Create. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxFrame_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxFrame_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxPoint, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxFrame_Create. Expected SWIGTYPE_p_wxPoint");
    }
  }
  result = (bool)(arg1)->Create(arg2,arg3,(wxString const &)*arg4,(wxPoint const &)*arg5);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_Create__SWIG_4) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxWindow *arg2 = (wxWindow *) 0 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[4];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_Create. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxWindow, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_Create. Expected SWIGTYPE_p_wxWindow");
    }
  }
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxFrame_Create. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxFrame_Create. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (bool)(arg1)->Create(arg2,arg3,(wxString const &)*arg4);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_Create) {
  int argc;
  zval **argv[8];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
          }
          if (_v) {
            _wrap_wxFrame_Create__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
            }
            if (_v) {
              _wrap_wxFrame_Create__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  if (argc == 6) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
            }
            if (_v) {
              {
                void *tmp;
                _v = (SWIG_ConvertPtr(*argv[5], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
              }
              if (_v) {
                _wrap_wxFrame_Create__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
              }
            }
          }
        }
      }
    }
  }
  if (argc == 7) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
            }
            if (_v) {
              {
                void *tmp;
                _v = (SWIG_ConvertPtr(*argv[5], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
              }
              if (_v) {
                _v = (Z_TYPE_PP(argv[6]) == IS_LONG); 
                if (_v) {
                  _wrap_wxFrame_Create__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
                }
              }
            }
          }
        }
      }
    }
  }
  if (argc == 8) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxWindow, 0) >= 0);
      }
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxPoint, 0) >= 0);
            }
            if (_v) {
              {
                void *tmp;
                _v = (SWIG_ConvertPtr(*argv[5], (void**)&tmp, SWIGTYPE_p_wxSize, 0) >= 0);
              }
              if (_v) {
                _v = (Z_TYPE_PP(argv[6]) == IS_LONG); 
                if (_v) {
                  {
                    void *tmp;
                    _v = (SWIG_ConvertPtr(*argv[7], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
                  }
                  if (_v) {
                    _wrap_wxFrame_Create__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxFrame_Create'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_CreateStatusBar__SWIG_0) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  int arg2 ;
  long arg3 ;
  wxWindowID arg4 ;
  wxString *arg5 = 0 ;
  wxWindowID *tmp4 ;
  zval **args[5];
  wxStatusBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_CreateStatusBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (long) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxFrame_CreateStatusBar. Expected SWIGTYPE_p_wxWindowID");
    }
    arg4 = *tmp4;
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxString, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxFrame_CreateStatusBar. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxStatusBar *)(arg1)->CreateStatusBar(arg2,arg3,arg4,(wxString const &)*arg5);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxStatusBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_CreateStatusBar__SWIG_1) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  int arg2 ;
  long arg3 ;
  wxWindowID arg4 ;
  wxWindowID *tmp4 ;
  zval **args[4];
  wxStatusBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_CreateStatusBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (long) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxFrame_CreateStatusBar. Expected SWIGTYPE_p_wxWindowID");
    }
    arg4 = *tmp4;
  }
  result = (wxStatusBar *)(arg1)->CreateStatusBar(arg2,arg3,arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxStatusBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_CreateStatusBar__SWIG_2) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  int arg2 ;
  long arg3 ;
  zval **args[3];
  wxStatusBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_CreateStatusBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (long) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  result = (wxStatusBar *)(arg1)->CreateStatusBar(arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxStatusBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_CreateStatusBar__SWIG_3) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  int arg2 ;
  zval **args[2];
  wxStatusBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_CreateStatusBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (wxStatusBar *)(arg1)->CreateStatusBar(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxStatusBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_CreateStatusBar__SWIG_4) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  zval **args[1];
  wxStatusBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_CreateStatusBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxStatusBar *)(arg1)->CreateStatusBar();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxStatusBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_CreateStatusBar) {
  int argc;
  zval **argv[5];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _wrap_wxFrame_CreateStatusBar__SWIG_4(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxFrame_CreateStatusBar__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxFrame_CreateStatusBar__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
          }
          if (_v) {
            _wrap_wxFrame_CreateStatusBar__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
          }
          if (_v) {
            {
              void *tmp;
              _v = (SWIG_ConvertPtr(*argv[4], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
            }
            if (_v) {
              _wrap_wxFrame_CreateStatusBar__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
            }
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxFrame_CreateStatusBar'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_CreateToolBar__SWIG_0) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  long arg2 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[4];
  wxToolBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_CreateToolBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxFrame_CreateToolBar. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxFrame_CreateToolBar. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxToolBar *)(arg1)->CreateToolBar(arg2,arg3,(wxString const &)*arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxToolBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_CreateToolBar__SWIG_1) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  long arg2 ;
  wxWindowID arg3 ;
  wxWindowID *tmp3 ;
  zval **args[3];
  wxToolBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_CreateToolBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxFrame_CreateToolBar. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  result = (wxToolBar *)(arg1)->CreateToolBar(arg2,arg3);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxToolBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_CreateToolBar__SWIG_2) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  long arg2 ;
  zval **args[2];
  wxToolBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_CreateToolBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (wxToolBar *)(arg1)->CreateToolBar(arg2);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxToolBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_CreateToolBar__SWIG_3) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  zval **args[1];
  wxToolBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_CreateToolBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxToolBar *)(arg1)->CreateToolBar();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxToolBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_CreateToolBar) {
  int argc;
  zval **argv[4];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _wrap_wxFrame_CreateToolBar__SWIG_3(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxFrame_CreateToolBar__SWIG_2(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          _wrap_wxFrame_CreateToolBar__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        {
          void *tmp;
          _v = (SWIG_ConvertPtr(*argv[2], (void **)&tmp, SWIGTYPE_p_wxWindowID, 0) >= 0);
        }
        if (_v) {
          {
            void *tmp;
            _v = (SWIG_ConvertPtr(*argv[3], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
          }
          if (_v) {
            _wrap_wxFrame_CreateToolBar__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
          }
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxFrame_CreateToolBar'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_GetClientAreaOrigin) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  zval **args[1];
  wxPoint result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_GetClientAreaOrigin. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = ((wxFrame const *)arg1)->GetClientAreaOrigin();
  {
    wxPoint * resultobj = new wxPoint((const wxPoint &) result);
    SWIG_SetPointerZval(return_value, (void *)resultobj, SWIGTYPE_p_wxPoint, 1);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_GetMenuBar) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  zval **args[1];
  wxMenuBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_GetMenuBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxMenuBar *)((wxFrame const *)arg1)->GetMenuBar();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxMenuBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_GetStatusBar) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  zval **args[1];
  wxStatusBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_GetStatusBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxStatusBar *)((wxFrame const *)arg1)->GetStatusBar();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxStatusBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_GetStatusBarPane) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  zval **args[1];
  int result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_GetStatusBarPane. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (int)((wxFrame const *)arg1)->GetStatusBarPane();
  {
    ZVAL_LONG(return_value,result);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_GetToolBar) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  zval **args[1];
  wxToolBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_GetToolBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  result = (wxToolBar *)((wxFrame const *)arg1)->GetToolBar();
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxToolBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_OnCreateStatusBar) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  int arg2 ;
  long arg3 ;
  wxWindowID arg4 ;
  wxString *arg5 = 0 ;
  wxWindowID *tmp4 ;
  zval **args[5];
  wxStatusBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 5 || zend_get_parameters_array_ex(5, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_OnCreateStatusBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (long) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &tmp4, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxFrame_OnCreateStatusBar. Expected SWIGTYPE_p_wxWindowID");
    }
    arg4 = *tmp4;
  }
  {
    if(SWIG_ConvertPtr(*args[4], (void **) &arg5, SWIGTYPE_p_wxString, 0) < 0 || arg5 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 5 of wxFrame_OnCreateStatusBar. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxStatusBar *)(arg1)->OnCreateStatusBar(arg2,arg3,arg4,(wxString const &)*arg5);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxStatusBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_OnCreateToolBar) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  long arg2 ;
  wxWindowID arg3 ;
  wxString *arg4 = 0 ;
  wxWindowID *tmp3 ;
  zval **args[4];
  wxToolBar *result = 0 ;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 4 || zend_get_parameters_array_ex(4, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_OnCreateToolBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (long) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &tmp3, SWIGTYPE_p_wxWindowID, 0) < 0 || tmp3 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxFrame_OnCreateToolBar. Expected SWIGTYPE_p_wxWindowID");
    }
    arg3 = *tmp3;
  }
  {
    if(SWIG_ConvertPtr(*args[3], (void **) &arg4, SWIGTYPE_p_wxString, 0) < 0 || arg4 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 4 of wxFrame_OnCreateToolBar. Expected SWIGTYPE_p_wxString");
    }
  }
  result = (wxToolBar *)(arg1)->OnCreateToolBar(arg2,arg3,(wxString const &)*arg4);
  
  SWIG_SetPointerZval(return_value, (void *)result, SWIGTYPE_p_wxToolBar, 0);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_ProcessCommand) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  int arg2 ;
  zval **args[2];
  bool result;
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_ProcessCommand. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  result = (bool)(arg1)->ProcessCommand(arg2);
  {
    ZVAL_BOOL(return_value,(result)?1:0);
  }
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_SetMenuBar) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxMenuBar *arg2 = (wxMenuBar *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_SetMenuBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxMenuBar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_SetMenuBar. Expected SWIGTYPE_p_wxMenuBar");
    }
  }
  (arg1)->SetMenuBar(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_SetStatusBar) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxStatusBar *arg2 = (wxStatusBar *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_SetStatusBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxStatusBar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_SetStatusBar. Expected SWIGTYPE_p_wxStatusBar");
    }
  }
  (arg1)->SetStatusBar(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_SetStatusBarPane) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_SetStatusBarPane. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->SetStatusBarPane(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_SetStatusText__SWIG_0) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxString *arg2 = 0 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_SetStatusText. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_SetStatusText. Expected SWIGTYPE_p_wxString");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->SetStatusText((wxString const &)*arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_SetStatusText__SWIG_1) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_SetStatusText. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_SetStatusText. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->SetStatusText((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_SetStatusText) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        _wrap_wxFrame_SetStatusText__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxFrame_SetStatusText__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxFrame_SetStatusText'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_SetStatusWidths) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  int arg2 ;
  int *arg3 = (int *) 0 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_SetStatusWidths. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  {
    if(SWIG_ConvertPtr(*args[2], (void **) &arg3, SWIGTYPE_p_int, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 3 of wxFrame_SetStatusWidths. Expected SWIGTYPE_p_int");
    }
  }
  (arg1)->SetStatusWidths(arg2,(int const *)arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_SetToolBar) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxToolBar *arg2 = (wxToolBar *) 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_SetToolBar. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxToolBar, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_SetToolBar. Expected SWIGTYPE_p_wxToolBar");
    }
  }
  (arg1)->SetToolBar(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_PushStatusText__SWIG_0) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxString *arg2 = 0 ;
  int arg3 ;
  zval **args[3];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 3 || zend_get_parameters_array_ex(3, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_PushStatusText. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_PushStatusText. Expected SWIGTYPE_p_wxString");
    }
  }
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[2]);
  arg3 = (int) Z_LVAL_PP(args[2]);
  /*@SWIG@*/;
  
  (arg1)->PushStatusText((wxString const &)*arg2,arg3);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_PushStatusText__SWIG_1) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  wxString *arg2 = 0 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_PushStatusText. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  {
    if(SWIG_ConvertPtr(*args[1], (void **) &arg2, SWIGTYPE_p_wxString, 0) < 0 || arg2 == NULL) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 2 of wxFrame_PushStatusText. Expected SWIGTYPE_p_wxString");
    }
  }
  (arg1)->PushStatusText((wxString const &)*arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_PushStatusText) {
  int argc;
  zval **argv[3];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        _wrap_wxFrame_PushStatusText__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      {
        void *tmp;
        _v = (SWIG_ConvertPtr(*argv[1], (void**)&tmp, SWIGTYPE_p_wxString, 0) >= 0);
      }
      if (_v) {
        _v = (Z_TYPE_PP(argv[2]) == IS_LONG); 
        if (_v) {
          _wrap_wxFrame_PushStatusText__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
        }
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxFrame_PushStatusText'";
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_PopStatusText__SWIG_0) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  int arg2 ;
  zval **args[2];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 2 || zend_get_parameters_array_ex(2, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_PopStatusText. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  
  /*@SWIG:/home/jgm/bin/swig-build/share/swig/2.0.11/php/utils.i,7,CONVERT_INT_IN@*/
  convert_to_long_ex(args[1]);
  arg2 = (int) Z_LVAL_PP(args[1]);
  /*@SWIG@*/;
  
  (arg1)->PopStatusText(arg2);
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_PopStatusText__SWIG_1) {
  wxFrame *arg1 = (wxFrame *) 0 ;
  zval **args[1];
  
  SWIG_ResetError();
  if(ZEND_NUM_ARGS() != 1 || zend_get_parameters_array_ex(1, args) != SUCCESS) {
    WRONG_PARAM_COUNT;
  }
  
  {
    if(SWIG_ConvertPtr(*args[0], (void **) &arg1, SWIGTYPE_p_wxFrame, 0) < 0) {
      SWIG_PHP_Error(E_ERROR, "Type error in argument 1 of wxFrame_PopStatusText. Expected SWIGTYPE_p_wxFrame");
    }
  }
  if(!arg1) SWIG_PHP_Error(E_ERROR, "this pointer is NULL");
  (arg1)->PopStatusText();
  
  return;
fail:
  SWIG_FAIL();
}


ZEND_NAMED_FUNCTION(_wrap_wxFrame_PopStatusText) {
  int argc;
  zval **argv[2];
  
  argc = ZEND_NUM_ARGS();
  zend_get_parameters_array_ex(argc,argv);
  if (argc == 1) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _wrap_wxFrame_PopStatusText__SWIG_1(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *tmp;
      _v = (SWIG_ConvertPtr(*argv[0], (void**)&tmp, SWIGTYPE_p_wxFrame, 0) >= 0);
    }
    if (_v) {
      _v = (Z_TYPE_PP(argv[1]) == IS_LONG); 
      if (_v) {
        _wrap_wxFrame_PopStatusText__SWIG_0(INTERNAL_FUNCTION_PARAM_PASSTHRU); return;
      }
    }
  }
  
  SWIG_ErrorCode() = E_ERROR;
  SWIG_ErrorMsg() = "No matching function for overloaded 'wxFrame_PopStatusText'";
  SWIG_FAIL();
}


static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxInitializer) {
  __wrap_delete_wxInitializer(rsrc, SWIGTYPE_p_wxInitializer->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxColour) {
  /* No destructor for simple type _p_wxColour */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxCoord) {
  /* No destructor for simple type _p_wxCoord */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxVideoMode) {
  /* No destructor for simple type _p_wxVideoMode */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxValidator) {
  /* No destructor for simple type _p_wxValidator */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxToolBar) {
  /* No destructor for simple type _p_wxToolBar */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxMenuBar) {
  /* No destructor for simple type _p_wxMenuBar */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxWindowID) {
  /* No destructor for simple type _p_wxWindowID */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxVisualAttributes) {
  __wrap_delete_wxVisualAttributes(rsrc, SWIGTYPE_p_wxVisualAttributes->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxSizer) {
  /* No destructor for simple type _p_wxSizer */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxToolTip) {
  /* No destructor for simple type _p_wxToolTip */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxAppTraits) {
  /* No destructor for simple type _p_wxAppTraits */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxStatusBar) {
  /* No destructor for simple type _p_wxStatusBar */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxSize) {
  /* No destructor for simple type _p_wxSize */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxFont) {
  /* No destructor for simple type _p_wxFont */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxWindow) {
  __wrap_delete_wxWindow(rsrc, SWIGTYPE_p_wxWindow->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxNonOwnedWindow) {
  __wrap_delete_wxNonOwnedWindow(rsrc, SWIGTYPE_p_wxNonOwnedWindow->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxTopLevelWindow) {
  __wrap_delete_wxTopLevelWindow(rsrc, SWIGTYPE_p_wxTopLevelWindow->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_int) {
  /* No destructor for simple type _int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxDropTarget) {
  /* No destructor for simple type _p_wxDropTarget */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxApp) {
  __wrap_delete_wxApp(rsrc, SWIGTYPE_p_wxApp->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxWindowBase) {
  /* No destructor for simple type _p_wxWindowBase */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxByte) {
  /* No destructor for simple type _p_wxByte */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxAcceleratorTable) {
  /* No destructor for simple type _p_wxAcceleratorTable */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxWindowList) {
  /* No destructor for simple type _p_wxWindowList */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxLayoutDirection) {
  /* No destructor for simple type _p_wxLayoutDirection */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_WXWidget) {
  /* No destructor for simple type _p_WXWidget */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_p_wxChar) {
  /* No destructor for simple type _p_p_wxChar */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxChar) {
  /* No destructor for simple type _p_wxChar */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxEvent) {
  /* No destructor for simple type _p_wxEvent */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxPalette) {
  /* No destructor for simple type _p_wxPalette */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxObject) {
  /* No destructor for simple type _p_wxObject */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxRect) {
  /* No destructor for simple type _p_wxRect */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxString) {
  /* No destructor for simple type _p_wxString */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxCmdLineParser) {
  /* No destructor for simple type _p_wxCmdLineParser */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxBackgroundStyle) {
  /* No destructor for simple type _p_wxBackgroundStyle */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxEvtHandler) {
  /* No destructor for simple type _p_wxEvtHandler */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxIconBundle) {
  /* No destructor for simple type _p_wxIconBundle */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxPoint) {
  /* No destructor for simple type _p_wxPoint */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxCaret) {
  /* No destructor for simple type _p_wxCaret */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxLayoutConstraints) {
  /* No destructor for simple type _p_wxLayoutConstraints */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxUpdateUIEvent) {
  /* No destructor for simple type _p_wxUpdateUIEvent */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxGraphicsPath) {
  /* No destructor for simple type _p_wxGraphicsPath */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxCursor) {
  /* No destructor for simple type _p_wxCursor */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxHitTest) {
  /* No destructor for simple type _p_wxHitTest */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxIcon) {
  /* No destructor for simple type _p_wxIcon */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxHelpEvent__Origin) {
  /* No destructor for simple type _p_wxHelpEvent__Origin */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxRegion) {
  /* No destructor for simple type _p_wxRegion */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxEventLoopBase) {
  /* No destructor for simple type _p_wxEventLoopBase */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxFrame) {
  __wrap_delete_wxFrame(rsrc, SWIGTYPE_p_wxFrame->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxAppConsole) {
  __wrap_delete_wxAppConsole(rsrc, SWIGTYPE_p_wxAppConsole->name TSRMLS_CC);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxMenu) {
  /* No destructor for simple type _p_wxMenu */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxEventFunction) {
  /* No destructor for simple type _p_wxEventFunction */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_int) {
  /* No destructor for simple type _p_int */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxKeyEvent) {
  /* No destructor for simple type _p_wxKeyEvent */
  efree(rsrc->ptr);
}
static ZEND_RSRC_DTOR_FUNC(_wrap_destroy_p_wxBorder) {
  /* No destructor for simple type _p_wxBorder */
  efree(rsrc->ptr);
}
/* end wrapper section */
/* class entry subsection */


/* entry subsection */
/* Every non-class user visible function must have an entry here */
static zend_function_entry wxwidgets_functions[] = {
 SWIG_ZEND_NAMED_FE(new_wxinitializer,_wrap_new_wxInitializer,NULL)
 SWIG_ZEND_NAMED_FE(wxinitializer_isok,_wrap_wxInitializer_IsOk,NULL)
 SWIG_ZEND_NAMED_FE(wxentrystart,_wrap_wxEntryStart,NULL)
 SWIG_ZEND_NAMED_FE(wxentrycleanup,_wrap_wxEntryCleanup,NULL)
 SWIG_ZEND_NAMED_FE(wxuninitialize,_wrap_wxUninitialize,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_mainloop,_wrap_wxAppConsole_MainLoop,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_exitmainloop,_wrap_wxAppConsole_ExitMainLoop,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_filterevent,_wrap_wxAppConsole_FilterEvent,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_getmainloop,_wrap_wxAppConsole_GetMainLoop,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_handleevent,_wrap_wxAppConsole_HandleEvent,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_useseventloop,_wrap_wxAppConsole_UsesEventLoop,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_processpendingevents,_wrap_wxAppConsole_ProcessPendingEvents,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_deletependingevents,_wrap_wxAppConsole_DeletePendingEvents,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_haspendingevents,_wrap_wxAppConsole_HasPendingEvents,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_suspendprocessingofpendingevents,_wrap_wxAppConsole_SuspendProcessingOfPendingEvents,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_resumeprocessingofpendingevents,_wrap_wxAppConsole_ResumeProcessingOfPendingEvents,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_schedulefordestruction,_wrap_wxAppConsole_ScheduleForDestruction,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_isscheduledfordestruction,_wrap_wxAppConsole_IsScheduledForDestruction,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_yield,_wrap_wxAppConsole_Yield,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_setinstance,_wrap_wxAppConsole_SetInstance,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_getinstance,_wrap_wxAppConsole_GetInstance,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_ismainlooprunning,_wrap_wxAppConsole_IsMainLoopRunning,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_onassertfailure,_wrap_wxAppConsole_OnAssertFailure,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_oncmdlineerror,_wrap_wxAppConsole_OnCmdLineError,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_oncmdlinehelp,_wrap_wxAppConsole_OnCmdLineHelp,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_oncmdlineparsed,_wrap_wxAppConsole_OnCmdLineParsed,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_oneventloopenter,_wrap_wxAppConsole_OnEventLoopEnter,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_oneventloopexit,_wrap_wxAppConsole_OnEventLoopExit,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_onexceptioninmainloop,_wrap_wxAppConsole_OnExceptionInMainLoop,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_onexit,_wrap_wxAppConsole_OnExit,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_onfatalexception,_wrap_wxAppConsole_OnFatalException,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_oninit,_wrap_wxAppConsole_OnInit,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_oninitcmdline,_wrap_wxAppConsole_OnInitCmdLine,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_onrun,_wrap_wxAppConsole_OnRun,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_onunhandledexception,_wrap_wxAppConsole_OnUnhandledException,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_getappdisplayname,_wrap_wxAppConsole_GetAppDisplayName,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_getappname,_wrap_wxAppConsole_GetAppName,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_getclassname,_wrap_wxAppConsole_GetClassName,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_gettraits,_wrap_wxAppConsole_GetTraits,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_getvendordisplayname,_wrap_wxAppConsole_GetVendorDisplayName,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_getvendorname,_wrap_wxAppConsole_GetVendorName,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_setappdisplayname,_wrap_wxAppConsole_SetAppDisplayName,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_setappname,_wrap_wxAppConsole_SetAppName,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_setclassname,_wrap_wxAppConsole_SetClassName,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_setvendordisplayname,_wrap_wxAppConsole_SetVendorDisplayName,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_setvendorname,_wrap_wxAppConsole_SetVendorName,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_argc_set,_wrap_wxAppConsole_argc_set,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_argc_get,_wrap_wxAppConsole_argc_get,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_argv_set,_wrap_wxAppConsole_argv_set,NULL)
 SWIG_ZEND_NAMED_FE(wxappconsole_argv_get,_wrap_wxAppConsole_argv_get,NULL)
 SWIG_ZEND_NAMED_FE(new_wxappconsole,_wrap_new_wxAppConsole,NULL)
 SWIG_ZEND_NAMED_FE(new_wxapp,_wrap_new_wxApp,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_getdisplaymode,_wrap_wxApp_GetDisplayMode,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_getexitonframedelete,_wrap_wxApp_GetExitOnFrameDelete,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_getlayoutdirection,_wrap_wxApp_GetLayoutDirection,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_getusebestvisual,_wrap_wxApp_GetUseBestVisual,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_gettopwindow,_wrap_wxApp_GetTopWindow,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_isactive,_wrap_wxApp_IsActive,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_safeyield,_wrap_wxApp_SafeYield,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_safeyieldfor,_wrap_wxApp_SafeYieldFor,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_setdisplaymode,_wrap_wxApp_SetDisplayMode,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_setexitonframedelete,_wrap_wxApp_SetExitOnFrameDelete,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_setnativetheme,_wrap_wxApp_SetNativeTheme,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_settopwindow,_wrap_wxApp_SetTopWindow,NULL)
 SWIG_ZEND_NAMED_FE(wxapp_setusebestvisual,_wrap_wxApp_SetUseBestVisual,NULL)
 SWIG_ZEND_NAMED_FE(wxhandlefatalexceptions,_wrap_wxHandleFatalExceptions,NULL)
 SWIG_ZEND_NAMED_FE(wxinitialize,_wrap_wxInitialize,NULL)
 SWIG_ZEND_NAMED_FE(wxwakeupidle,_wrap_wxWakeUpIdle,NULL)
 SWIG_ZEND_NAMED_FE(wxyield,_wrap_wxYield,NULL)
 SWIG_ZEND_NAMED_FE(wxsafeyield,_wrap_wxSafeYield,NULL)
 SWIG_ZEND_NAMED_FE(wxentry,_wrap_wxEntry,NULL)
 SWIG_ZEND_NAMED_FE(wxexit,_wrap_wxExit,NULL)
 SWIG_ZEND_NAMED_FE(wxvisualattributes_font_set,_wrap_wxVisualAttributes_font_set,NULL)
 SWIG_ZEND_NAMED_FE(wxvisualattributes_font_get,_wrap_wxVisualAttributes_font_get,NULL)
 SWIG_ZEND_NAMED_FE(wxvisualattributes_colfg_set,_wrap_wxVisualAttributes_colFg_set,NULL)
 SWIG_ZEND_NAMED_FE(wxvisualattributes_colfg_get,_wrap_wxVisualAttributes_colFg_get,NULL)
 SWIG_ZEND_NAMED_FE(wxvisualattributes_colbg_set,_wrap_wxVisualAttributes_colBg_set,NULL)
 SWIG_ZEND_NAMED_FE(wxvisualattributes_colbg_get,_wrap_wxVisualAttributes_colBg_get,NULL)
 SWIG_ZEND_NAMED_FE(new_wxvisualattributes,_wrap_new_wxVisualAttributes,NULL)
 SWIG_ZEND_NAMED_FE(new_wxwindow,_wrap_new_wxWindow,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_create,_wrap_wxWindow_Create,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_acceptsfocus,_wrap_wxWindow_AcceptsFocus,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_acceptsfocusfromkeyboard,_wrap_wxWindow_AcceptsFocusFromKeyboard,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_acceptsfocusrecursively,_wrap_wxWindow_AcceptsFocusRecursively,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_hasfocus,_wrap_wxWindow_HasFocus,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setcanfocus,_wrap_wxWindow_SetCanFocus,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setfocus,_wrap_wxWindow_SetFocus,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setfocusfromkbd,_wrap_wxWindow_SetFocusFromKbd,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_addchild,_wrap_wxWindow_AddChild,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_destroychildren,_wrap_wxWindow_DestroyChildren,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_findwindow,_wrap_wxWindow_FindWindow,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getchildren,_wrap_wxWindow_GetChildren,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_removechild,_wrap_wxWindow_RemoveChild,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getgrandparent,_wrap_wxWindow_GetGrandParent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getnextsibling,_wrap_wxWindow_GetNextSibling,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getparent,_wrap_wxWindow_GetParent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getprevsibling,_wrap_wxWindow_GetPrevSibling,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_isdescendant,_wrap_wxWindow_IsDescendant,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_reparent,_wrap_wxWindow_Reparent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_alwaysshowscrollbars,_wrap_wxWindow_AlwaysShowScrollbars,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getscrollpos,_wrap_wxWindow_GetScrollPos,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getscrollrange,_wrap_wxWindow_GetScrollRange,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getscrollthumb,_wrap_wxWindow_GetScrollThumb,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_canscroll,_wrap_wxWindow_CanScroll,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_hasscrollbar,_wrap_wxWindow_HasScrollbar,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_isscrollbaralwaysshown,_wrap_wxWindow_IsScrollbarAlwaysShown,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_scrolllines,_wrap_wxWindow_ScrollLines,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_scrollpages,_wrap_wxWindow_ScrollPages,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_scrollwindow,_wrap_wxWindow_ScrollWindow,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_lineup,_wrap_wxWindow_LineUp,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_linedown,_wrap_wxWindow_LineDown,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_pageup,_wrap_wxWindow_PageUp,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_pagedown,_wrap_wxWindow_PageDown,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setscrollpos,_wrap_wxWindow_SetScrollPos,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setscrollbar,_wrap_wxWindow_SetScrollbar,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_cachebestsize,_wrap_wxWindow_CacheBestSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_clienttowindowsize,_wrap_wxWindow_ClientToWindowSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_windowtoclientsize,_wrap_wxWindow_WindowToClientSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_fit,_wrap_wxWindow_Fit,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_fitinside,_wrap_wxWindow_FitInside,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getbestsize,_wrap_wxWindow_GetBestSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getbestheight,_wrap_wxWindow_GetBestHeight,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getbestwidth,_wrap_wxWindow_GetBestWidth,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getclientsize,_wrap_wxWindow_GetClientSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_geteffectiveminsize,_wrap_wxWindow_GetEffectiveMinSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getmaxclientsize,_wrap_wxWindow_GetMaxClientSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getmaxsize,_wrap_wxWindow_GetMaxSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getminclientsize,_wrap_wxWindow_GetMinClientSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getminsize,_wrap_wxWindow_GetMinSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getminwidth,_wrap_wxWindow_GetMinWidth,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getminheight,_wrap_wxWindow_GetMinHeight,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getmaxwidth,_wrap_wxWindow_GetMaxWidth,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getmaxheight,_wrap_wxWindow_GetMaxHeight,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getsize,_wrap_wxWindow_GetSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getvirtualsize,_wrap_wxWindow_GetVirtualSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getbestvirtualsize,_wrap_wxWindow_GetBestVirtualSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getwindowbordersize,_wrap_wxWindow_GetWindowBorderSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_informfirstdirection,_wrap_wxWindow_InformFirstDirection,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_invalidatebestsize,_wrap_wxWindow_InvalidateBestSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_postsizeevent,_wrap_wxWindow_PostSizeEvent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_postsizeeventtoparent,_wrap_wxWindow_PostSizeEventToParent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_sendsizeevent,_wrap_wxWindow_SendSizeEvent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_sendsizeeventtoparent,_wrap_wxWindow_SendSizeEventToParent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setclientsize,_wrap_wxWindow_SetClientSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setcontainingsizer,_wrap_wxWindow_SetContainingSizer,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setinitialsize,_wrap_wxWindow_SetInitialSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setmaxclientsize,_wrap_wxWindow_SetMaxClientSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setmaxsize,_wrap_wxWindow_SetMaxSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setminclientsize,_wrap_wxWindow_SetMinClientSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setminsize,_wrap_wxWindow_SetMinSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setsize,_wrap_wxWindow_SetSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setsizehints,_wrap_wxWindow_SetSizeHints,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setvirtualsize,_wrap_wxWindow_SetVirtualSize,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_center,_wrap_wxWindow_Center,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_centeronparent,_wrap_wxWindow_CenterOnParent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_centre,_wrap_wxWindow_Centre,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_centreonparent,_wrap_wxWindow_CentreOnParent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getposition,_wrap_wxWindow_GetPosition,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getrect,_wrap_wxWindow_GetRect,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getscreenposition,_wrap_wxWindow_GetScreenPosition,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getscreenrect,_wrap_wxWindow_GetScreenRect,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getclientareaorigin,_wrap_wxWindow_GetClientAreaOrigin,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getclientrect,_wrap_wxWindow_GetClientRect,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_move,_wrap_wxWindow_Move,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setposition,_wrap_wxWindow_SetPosition,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_clienttoscreen,_wrap_wxWindow_ClientToScreen,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_convertdialogtopixels,_wrap_wxWindow_ConvertDialogToPixels,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_convertpixelstodialog,_wrap_wxWindow_ConvertPixelsToDialog,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_screentoclient,_wrap_wxWindow_ScreenToClient,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_clearbackground,_wrap_wxWindow_ClearBackground,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_freeze,_wrap_wxWindow_Freeze,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_thaw,_wrap_wxWindow_Thaw,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_isfrozen,_wrap_wxWindow_IsFrozen,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getbackgroundcolour,_wrap_wxWindow_GetBackgroundColour,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getbackgroundstyle,_wrap_wxWindow_GetBackgroundStyle,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getcharheight,_wrap_wxWindow_GetCharHeight,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getcharwidth,_wrap_wxWindow_GetCharWidth,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getdefaultattributes,_wrap_wxWindow_GetDefaultAttributes,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getfont,_wrap_wxWindow_GetFont,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getforegroundcolour,_wrap_wxWindow_GetForegroundColour,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_gettextextent,_wrap_wxWindow_GetTextExtent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getupdateregion,_wrap_wxWindow_GetUpdateRegion,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getupdateclientrect,_wrap_wxWindow_GetUpdateClientRect,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_hastransparentbackground,_wrap_wxWindow_HasTransparentBackground,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_refresh,_wrap_wxWindow_Refresh,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_refreshrect,_wrap_wxWindow_RefreshRect,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_update,_wrap_wxWindow_Update,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setbackgroundcolour,_wrap_wxWindow_SetBackgroundColour,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setbackgroundstyle,_wrap_wxWindow_SetBackgroundStyle,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_istransparentbackgroundsupported,_wrap_wxWindow_IsTransparentBackgroundSupported,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setfont,_wrap_wxWindow_SetFont,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setforegroundcolour,_wrap_wxWindow_SetForegroundColour,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setownbackgroundcolour,_wrap_wxWindow_SetOwnBackgroundColour,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setownfont,_wrap_wxWindow_SetOwnFont,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setownforegroundcolour,_wrap_wxWindow_SetOwnForegroundColour,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setpalette,_wrap_wxWindow_SetPalette,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_shouldinheritcolours,_wrap_wxWindow_ShouldInheritColours,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setthemeenabled,_wrap_wxWindow_SetThemeEnabled,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getthemeenabled,_wrap_wxWindow_GetThemeEnabled,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_cansettransparent,_wrap_wxWindow_CanSetTransparent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_settransparent,_wrap_wxWindow_SetTransparent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_geteventhandler,_wrap_wxWindow_GetEventHandler,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_handleasnavigationkey,_wrap_wxWindow_HandleAsNavigationKey,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_handlewindowevent,_wrap_wxWindow_HandleWindowEvent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_processwindowevent,_wrap_wxWindow_ProcessWindowEvent,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_processwindoweventlocally,_wrap_wxWindow_ProcessWindowEventLocally,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_popeventhandler,_wrap_wxWindow_PopEventHandler,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_pusheventhandler,_wrap_wxWindow_PushEventHandler,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_removeeventhandler,_wrap_wxWindow_RemoveEventHandler,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_seteventhandler,_wrap_wxWindow_SetEventHandler,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setnexthandler,_wrap_wxWindow_SetNextHandler,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setprevioushandler,_wrap_wxWindow_SetPreviousHandler,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getextrastyle,_wrap_wxWindow_GetExtraStyle,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getwindowstyleflag,_wrap_wxWindow_GetWindowStyleFlag,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getwindowstyle,_wrap_wxWindow_GetWindowStyle,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_hasextrastyle,_wrap_wxWindow_HasExtraStyle,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_hasflag,_wrap_wxWindow_HasFlag,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setextrastyle,_wrap_wxWindow_SetExtraStyle,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setwindowstyleflag,_wrap_wxWindow_SetWindowStyleFlag,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setwindowstyle,_wrap_wxWindow_SetWindowStyle,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_togglewindowstyle,_wrap_wxWindow_ToggleWindowStyle,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_moveafterintaborder,_wrap_wxWindow_MoveAfterInTabOrder,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_movebeforeintaborder,_wrap_wxWindow_MoveBeforeInTabOrder,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_navigate,_wrap_wxWindow_Navigate,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_navigatein,_wrap_wxWindow_NavigateIn,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_lower,_wrap_wxWindow_Lower,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_raise,_wrap_wxWindow_Raise,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_hide,_wrap_wxWindow_Hide,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_hidewitheffect,_wrap_wxWindow_HideWithEffect,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_isenabled,_wrap_wxWindow_IsEnabled,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_isexposed,_wrap_wxWindow_IsExposed,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_isshown,_wrap_wxWindow_IsShown,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_isshownonscreen,_wrap_wxWindow_IsShownOnScreen,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_disable,_wrap_wxWindow_Disable,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_enable,_wrap_wxWindow_Enable,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_show,_wrap_wxWindow_Show,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_showwitheffect,_wrap_wxWindow_ShowWithEffect,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_gethelptext,_wrap_wxWindow_GetHelpText,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_sethelptext,_wrap_wxWindow_SetHelpText,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_gethelptextatpoint,_wrap_wxWindow_GetHelpTextAtPoint,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_gettooltip,_wrap_wxWindow_GetToolTip,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_gettooltiptext,_wrap_wxWindow_GetToolTipText,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_settooltip,_wrap_wxWindow_SetToolTip,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_unsettooltip,_wrap_wxWindow_UnsetToolTip,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getpopupmenuselectionfromuser,_wrap_wxWindow_GetPopupMenuSelectionFromUser,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_popupmenu,_wrap_wxWindow_PopupMenu,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getvalidator,_wrap_wxWindow_GetValidator,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setvalidator,_wrap_wxWindow_SetValidator,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_transferdatafromwindow,_wrap_wxWindow_TransferDataFromWindow,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_transferdatatowindow,_wrap_wxWindow_TransferDataToWindow,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_validate,_wrap_wxWindow_Validate,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getid,_wrap_wxWindow_GetId,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getlabel,_wrap_wxWindow_GetLabel,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getlayoutdirection,_wrap_wxWindow_GetLayoutDirection,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getname,_wrap_wxWindow_GetName,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getwindowvariant,_wrap_wxWindow_GetWindowVariant,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setid,_wrap_wxWindow_SetId,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setlabel,_wrap_wxWindow_SetLabel,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setlayoutdirection,_wrap_wxWindow_SetLayoutDirection,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setname,_wrap_wxWindow_SetName,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setwindowvariant,_wrap_wxWindow_SetWindowVariant,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getacceleratortable,_wrap_wxWindow_GetAcceleratorTable,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setacceleratortable,_wrap_wxWindow_SetAcceleratorTable,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_close,_wrap_wxWindow_Close,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_destroy,_wrap_wxWindow_Destroy,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_isbeingdeleted,_wrap_wxWindow_IsBeingDeleted,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getdroptarget,_wrap_wxWindow_GetDropTarget,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setdroptarget,_wrap_wxWindow_SetDropTarget,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_dragacceptfiles,_wrap_wxWindow_DragAcceptFiles,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getcontainingsizer,_wrap_wxWindow_GetContainingSizer,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getsizer,_wrap_wxWindow_GetSizer,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setsizer,_wrap_wxWindow_SetSizer,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setsizerandfit,_wrap_wxWindow_SetSizerAndFit,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getconstraints,_wrap_wxWindow_GetConstraints,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setconstraints,_wrap_wxWindow_SetConstraints,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_layout,_wrap_wxWindow_Layout,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setautolayout,_wrap_wxWindow_SetAutoLayout,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getautolayout,_wrap_wxWindow_GetAutoLayout,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_capturemouse,_wrap_wxWindow_CaptureMouse,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getcaret,_wrap_wxWindow_GetCaret,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getcursor,_wrap_wxWindow_GetCursor,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_hascapture,_wrap_wxWindow_HasCapture,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_releasemouse,_wrap_wxWindow_ReleaseMouse,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setcaret,_wrap_wxWindow_SetCaret,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setcursor,_wrap_wxWindow_SetCursor,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_warppointer,_wrap_wxWindow_WarpPointer,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_hittest,_wrap_wxWindow_HitTest,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getborder,_wrap_wxWindow_GetBorder,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_doupdatewindowui,_wrap_wxWindow_DoUpdateWindowUI,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_gethandle,_wrap_wxWindow_GetHandle,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_hasmultiplepages,_wrap_wxWindow_HasMultiplePages,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_inheritattributes,_wrap_wxWindow_InheritAttributes,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_initdialog,_wrap_wxWindow_InitDialog,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_isdoublebuffered,_wrap_wxWindow_IsDoubleBuffered,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_setdoublebuffered,_wrap_wxWindow_SetDoubleBuffered,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_isretained,_wrap_wxWindow_IsRetained,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_isthisenabled,_wrap_wxWindow_IsThisEnabled,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_istoplevel,_wrap_wxWindow_IsTopLevel,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_oninternalidle,_wrap_wxWindow_OnInternalIdle,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_updatewindowui,_wrap_wxWindow_UpdateWindowUI,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getclassdefaultattributes,_wrap_wxWindow_GetClassDefaultAttributes,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_findfocus,_wrap_wxWindow_FindFocus,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_findwindowbyid,_wrap_wxWindow_FindWindowById,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_findwindowbylabel,_wrap_wxWindow_FindWindowByLabel,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_findwindowbyname,_wrap_wxWindow_FindWindowByName,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_getcapture,_wrap_wxWindow_GetCapture,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_newcontrolid,_wrap_wxWindow_NewControlId,NULL)
 SWIG_ZEND_NAMED_FE(wxwindow_unreservecontrolid,_wrap_wxWindow_UnreserveControlId,NULL)
 SWIG_ZEND_NAMED_FE(wxfindwindowatpointer,_wrap_wxFindWindowAtPointer,NULL)
 SWIG_ZEND_NAMED_FE(wxgetactivewindow,_wrap_wxGetActiveWindow,NULL)
 SWIG_ZEND_NAMED_FE(wxgettoplevelparent,_wrap_wxGetTopLevelParent,NULL)
 SWIG_ZEND_NAMED_FE(wxnonownedwindow_setshape,_wrap_wxNonOwnedWindow_SetShape,NULL)
 SWIG_ZEND_NAMED_FE(new_wxnonownedwindow,_wrap_new_wxNonOwnedWindow,NULL)
 SWIG_ZEND_NAMED_FE(new_wxtoplevelwindow,_wrap_new_wxTopLevelWindow,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_create,_wrap_wxTopLevelWindow_Create,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_cansettransparent,_wrap_wxTopLevelWindow_CanSetTransparent,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_centeronscreen,_wrap_wxTopLevelWindow_CenterOnScreen,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_centreonscreen,_wrap_wxTopLevelWindow_CentreOnScreen,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_enableclosebutton,_wrap_wxTopLevelWindow_EnableCloseButton,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_getdefaultitem,_wrap_wxTopLevelWindow_GetDefaultItem,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_getdefaultsize,_wrap_wxTopLevelWindow_GetDefaultSize,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_geticon,_wrap_wxTopLevelWindow_GetIcon,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_geticons,_wrap_wxTopLevelWindow_GetIcons,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_gettitle,_wrap_wxTopLevelWindow_GetTitle,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_iconize,_wrap_wxTopLevelWindow_Iconize,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_isactive,_wrap_wxTopLevelWindow_IsActive,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_isalwaysmaximized,_wrap_wxTopLevelWindow_IsAlwaysMaximized,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_isfullscreen,_wrap_wxTopLevelWindow_IsFullScreen,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_isiconized,_wrap_wxTopLevelWindow_IsIconized,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_ismaximized,_wrap_wxTopLevelWindow_IsMaximized,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_layout,_wrap_wxTopLevelWindow_Layout,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_maximize,_wrap_wxTopLevelWindow_Maximize,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_requestuserattention,_wrap_wxTopLevelWindow_RequestUserAttention,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_setdefaultitem,_wrap_wxTopLevelWindow_SetDefaultItem,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_settmpdefaultitem,_wrap_wxTopLevelWindow_SetTmpDefaultItem,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_gettmpdefaultitem,_wrap_wxTopLevelWindow_GetTmpDefaultItem,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_seticon,_wrap_wxTopLevelWindow_SetIcon,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_seticons,_wrap_wxTopLevelWindow_SetIcons,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_setmaxsize,_wrap_wxTopLevelWindow_SetMaxSize,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_setminsize,_wrap_wxTopLevelWindow_SetMinSize,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_setsizehints,_wrap_wxTopLevelWindow_SetSizeHints,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_settitle,_wrap_wxTopLevelWindow_SetTitle,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_settransparent,_wrap_wxTopLevelWindow_SetTransparent,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_shouldpreventappexit,_wrap_wxTopLevelWindow_ShouldPreventAppExit,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_osxsetmodified,_wrap_wxTopLevelWindow_OSXSetModified,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_osxismodified,_wrap_wxTopLevelWindow_OSXIsModified,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_setrepresentedfilename,_wrap_wxTopLevelWindow_SetRepresentedFilename,NULL)
 SWIG_ZEND_NAMED_FE(wxtoplevelwindow_showfullscreen,_wrap_wxTopLevelWindow_ShowFullScreen,NULL)
 SWIG_ZEND_NAMED_FE(new_wxframe,_wrap_new_wxFrame,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_centre,_wrap_wxFrame_Centre,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_create,_wrap_wxFrame_Create,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_createstatusbar,_wrap_wxFrame_CreateStatusBar,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_createtoolbar,_wrap_wxFrame_CreateToolBar,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_getclientareaorigin,_wrap_wxFrame_GetClientAreaOrigin,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_getmenubar,_wrap_wxFrame_GetMenuBar,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_getstatusbar,_wrap_wxFrame_GetStatusBar,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_getstatusbarpane,_wrap_wxFrame_GetStatusBarPane,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_gettoolbar,_wrap_wxFrame_GetToolBar,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_oncreatestatusbar,_wrap_wxFrame_OnCreateStatusBar,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_oncreatetoolbar,_wrap_wxFrame_OnCreateToolBar,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_processcommand,_wrap_wxFrame_ProcessCommand,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_setmenubar,_wrap_wxFrame_SetMenuBar,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_setstatusbar,_wrap_wxFrame_SetStatusBar,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_setstatusbarpane,_wrap_wxFrame_SetStatusBarPane,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_setstatustext,_wrap_wxFrame_SetStatusText,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_setstatuswidths,_wrap_wxFrame_SetStatusWidths,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_settoolbar,_wrap_wxFrame_SetToolBar,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_pushstatustext,_wrap_wxFrame_PushStatusText,NULL)
 SWIG_ZEND_NAMED_FE(wxframe_popstatustext,_wrap_wxFrame_PopStatusText,NULL)
 SWIG_ZEND_NAMED_FE(swig_wxwidgets_alter_newobject,_wrap_swig_wxwidgets_alter_newobject,NULL)
 SWIG_ZEND_NAMED_FE(swig_wxwidgets_get_newobject,_wrap_swig_wxwidgets_get_newobject,NULL)
{NULL, NULL, NULL}
};

/* init section */
#if ZEND_MODULE_API_NO <= 20090626
#undef ZEND_MODULE_BUILD_ID
#define ZEND_MODULE_BUILD_ID (char*)"API" ZEND_TOSTR(ZEND_MODULE_API_NO) ZEND_BUILD_TS ZEND_BUILD_DEBUG ZEND_BUILD_SYSTEM ZEND_BUILD_EXTRA
#endif
zend_module_entry wxwidgets_module_entry = {
    STANDARD_MODULE_HEADER,
    (char*)"wxwidgets",
    wxwidgets_functions,
    PHP_MINIT(wxwidgets),
    PHP_MSHUTDOWN(wxwidgets),
    PHP_RINIT(wxwidgets),
    PHP_RSHUTDOWN(wxwidgets),
    PHP_MINFO(wxwidgets),
    NO_VERSION_YET,
    STANDARD_MODULE_PROPERTIES
};
zend_module_entry* SWIG_module_entry = &wxwidgets_module_entry;

#ifdef __cplusplus
extern "C" {
#endif
SWIGEXPORT zend_module_entry *get_module(void) { return &wxwidgets_module_entry; }
#ifdef __cplusplus
}
#endif

#define SWIG_php_minit PHP_MINIT_FUNCTION(wxwidgets)
/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpreters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif


  SWIG_php_minit {
    SWIG_InitializeModule(0);


    //wxInitialize();

/* oinit subsection */
ZEND_INIT_MODULE_GLOBALS(wxwidgets, wxwidgets_init_globals, wxwidgets_destroy_globals);

/* Register resource destructors for pointer types */
le_swig__p_wxInitializer=zend_register_list_destructors_ex(_wrap_destroy_p_wxInitializer,NULL,(char *)(SWIGTYPE_p_wxInitializer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxInitializer,&le_swig__p_wxInitializer);
le_swig__p_wxColour=zend_register_list_destructors_ex(_wrap_destroy_p_wxColour,NULL,(char *)(SWIGTYPE_p_wxColour->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxColour,&le_swig__p_wxColour);
le_swig__p_wxCoord=zend_register_list_destructors_ex(_wrap_destroy_p_wxCoord,NULL,(char *)(SWIGTYPE_p_wxCoord->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxCoord,&le_swig__p_wxCoord);
le_swig__p_wxVideoMode=zend_register_list_destructors_ex(_wrap_destroy_p_wxVideoMode,NULL,(char *)(SWIGTYPE_p_wxVideoMode->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxVideoMode,&le_swig__p_wxVideoMode);
le_swig__p_wxValidator=zend_register_list_destructors_ex(_wrap_destroy_p_wxValidator,NULL,(char *)(SWIGTYPE_p_wxValidator->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxValidator,&le_swig__p_wxValidator);
le_swig__p_wxToolBar=zend_register_list_destructors_ex(_wrap_destroy_p_wxToolBar,NULL,(char *)(SWIGTYPE_p_wxToolBar->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxToolBar,&le_swig__p_wxToolBar);
le_swig__p_wxMenuBar=zend_register_list_destructors_ex(_wrap_destroy_p_wxMenuBar,NULL,(char *)(SWIGTYPE_p_wxMenuBar->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxMenuBar,&le_swig__p_wxMenuBar);
le_swig__p_wxWindowID=zend_register_list_destructors_ex(_wrap_destroy_p_wxWindowID,NULL,(char *)(SWIGTYPE_p_wxWindowID->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxWindowID,&le_swig__p_wxWindowID);
le_swig__p_wxVisualAttributes=zend_register_list_destructors_ex(_wrap_destroy_p_wxVisualAttributes,NULL,(char *)(SWIGTYPE_p_wxVisualAttributes->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxVisualAttributes,&le_swig__p_wxVisualAttributes);
le_swig__p_wxSizer=zend_register_list_destructors_ex(_wrap_destroy_p_wxSizer,NULL,(char *)(SWIGTYPE_p_wxSizer->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxSizer,&le_swig__p_wxSizer);
le_swig__p_wxToolTip=zend_register_list_destructors_ex(_wrap_destroy_p_wxToolTip,NULL,(char *)(SWIGTYPE_p_wxToolTip->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxToolTip,&le_swig__p_wxToolTip);
le_swig__p_wxAppTraits=zend_register_list_destructors_ex(_wrap_destroy_p_wxAppTraits,NULL,(char *)(SWIGTYPE_p_wxAppTraits->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxAppTraits,&le_swig__p_wxAppTraits);
le_swig__p_wxStatusBar=zend_register_list_destructors_ex(_wrap_destroy_p_wxStatusBar,NULL,(char *)(SWIGTYPE_p_wxStatusBar->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxStatusBar,&le_swig__p_wxStatusBar);
le_swig__p_wxSize=zend_register_list_destructors_ex(_wrap_destroy_p_wxSize,NULL,(char *)(SWIGTYPE_p_wxSize->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxSize,&le_swig__p_wxSize);
le_swig__p_wxFont=zend_register_list_destructors_ex(_wrap_destroy_p_wxFont,NULL,(char *)(SWIGTYPE_p_wxFont->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxFont,&le_swig__p_wxFont);
le_swig__p_wxWindow=zend_register_list_destructors_ex(_wrap_destroy_p_wxWindow,NULL,(char *)(SWIGTYPE_p_wxWindow->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxWindow,&le_swig__p_wxWindow);
le_swig__p_wxNonOwnedWindow=zend_register_list_destructors_ex(_wrap_destroy_p_wxNonOwnedWindow,NULL,(char *)(SWIGTYPE_p_wxNonOwnedWindow->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxNonOwnedWindow,&le_swig__p_wxNonOwnedWindow);
le_swig__p_wxTopLevelWindow=zend_register_list_destructors_ex(_wrap_destroy_p_wxTopLevelWindow,NULL,(char *)(SWIGTYPE_p_wxTopLevelWindow->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxTopLevelWindow,&le_swig__p_wxTopLevelWindow);
le_swig__int=zend_register_list_destructors_ex(_wrap_destroy_int,NULL,(char *)(SWIGTYPE_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_int,&le_swig__int);
le_swig__p_wxDropTarget=zend_register_list_destructors_ex(_wrap_destroy_p_wxDropTarget,NULL,(char *)(SWIGTYPE_p_wxDropTarget->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxDropTarget,&le_swig__p_wxDropTarget);
le_swig__p_wxApp=zend_register_list_destructors_ex(_wrap_destroy_p_wxApp,NULL,(char *)(SWIGTYPE_p_wxApp->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxApp,&le_swig__p_wxApp);
le_swig__p_wxWindowBase=zend_register_list_destructors_ex(_wrap_destroy_p_wxWindowBase,NULL,(char *)(SWIGTYPE_p_wxWindowBase->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxWindowBase,&le_swig__p_wxWindowBase);
le_swig__p_wxByte=zend_register_list_destructors_ex(_wrap_destroy_p_wxByte,NULL,(char *)(SWIGTYPE_p_wxByte->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxByte,&le_swig__p_wxByte);
le_swig__p_wxAcceleratorTable=zend_register_list_destructors_ex(_wrap_destroy_p_wxAcceleratorTable,NULL,(char *)(SWIGTYPE_p_wxAcceleratorTable->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxAcceleratorTable,&le_swig__p_wxAcceleratorTable);
le_swig__p_wxWindowList=zend_register_list_destructors_ex(_wrap_destroy_p_wxWindowList,NULL,(char *)(SWIGTYPE_p_wxWindowList->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxWindowList,&le_swig__p_wxWindowList);
le_swig__p_wxLayoutDirection=zend_register_list_destructors_ex(_wrap_destroy_p_wxLayoutDirection,NULL,(char *)(SWIGTYPE_p_wxLayoutDirection->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxLayoutDirection,&le_swig__p_wxLayoutDirection);
le_swig__p_WXWidget=zend_register_list_destructors_ex(_wrap_destroy_p_WXWidget,NULL,(char *)(SWIGTYPE_p_WXWidget->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_WXWidget,&le_swig__p_WXWidget);
le_swig__p_p_wxChar=zend_register_list_destructors_ex(_wrap_destroy_p_p_wxChar,NULL,(char *)(SWIGTYPE_p_p_wxChar->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_p_wxChar,&le_swig__p_p_wxChar);
le_swig__p_wxChar=zend_register_list_destructors_ex(_wrap_destroy_p_wxChar,NULL,(char *)(SWIGTYPE_p_wxChar->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxChar,&le_swig__p_wxChar);
le_swig__p_wxEvent=zend_register_list_destructors_ex(_wrap_destroy_p_wxEvent,NULL,(char *)(SWIGTYPE_p_wxEvent->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxEvent,&le_swig__p_wxEvent);
le_swig__p_wxPalette=zend_register_list_destructors_ex(_wrap_destroy_p_wxPalette,NULL,(char *)(SWIGTYPE_p_wxPalette->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxPalette,&le_swig__p_wxPalette);
le_swig__p_wxObject=zend_register_list_destructors_ex(_wrap_destroy_p_wxObject,NULL,(char *)(SWIGTYPE_p_wxObject->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxObject,&le_swig__p_wxObject);
le_swig__p_wxRect=zend_register_list_destructors_ex(_wrap_destroy_p_wxRect,NULL,(char *)(SWIGTYPE_p_wxRect->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxRect,&le_swig__p_wxRect);
le_swig__p_wxString=zend_register_list_destructors_ex(_wrap_destroy_p_wxString,NULL,(char *)(SWIGTYPE_p_wxString->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxString,&le_swig__p_wxString);
le_swig__p_wxCmdLineParser=zend_register_list_destructors_ex(_wrap_destroy_p_wxCmdLineParser,NULL,(char *)(SWIGTYPE_p_wxCmdLineParser->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxCmdLineParser,&le_swig__p_wxCmdLineParser);
le_swig__p_wxBackgroundStyle=zend_register_list_destructors_ex(_wrap_destroy_p_wxBackgroundStyle,NULL,(char *)(SWIGTYPE_p_wxBackgroundStyle->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxBackgroundStyle,&le_swig__p_wxBackgroundStyle);
le_swig__p_wxEvtHandler=zend_register_list_destructors_ex(_wrap_destroy_p_wxEvtHandler,NULL,(char *)(SWIGTYPE_p_wxEvtHandler->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxEvtHandler,&le_swig__p_wxEvtHandler);
le_swig__p_wxIconBundle=zend_register_list_destructors_ex(_wrap_destroy_p_wxIconBundle,NULL,(char *)(SWIGTYPE_p_wxIconBundle->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxIconBundle,&le_swig__p_wxIconBundle);
le_swig__p_wxPoint=zend_register_list_destructors_ex(_wrap_destroy_p_wxPoint,NULL,(char *)(SWIGTYPE_p_wxPoint->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxPoint,&le_swig__p_wxPoint);
le_swig__p_wxCaret=zend_register_list_destructors_ex(_wrap_destroy_p_wxCaret,NULL,(char *)(SWIGTYPE_p_wxCaret->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxCaret,&le_swig__p_wxCaret);
le_swig__p_wxLayoutConstraints=zend_register_list_destructors_ex(_wrap_destroy_p_wxLayoutConstraints,NULL,(char *)(SWIGTYPE_p_wxLayoutConstraints->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxLayoutConstraints,&le_swig__p_wxLayoutConstraints);
le_swig__p_wxUpdateUIEvent=zend_register_list_destructors_ex(_wrap_destroy_p_wxUpdateUIEvent,NULL,(char *)(SWIGTYPE_p_wxUpdateUIEvent->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxUpdateUIEvent,&le_swig__p_wxUpdateUIEvent);
le_swig__p_wxGraphicsPath=zend_register_list_destructors_ex(_wrap_destroy_p_wxGraphicsPath,NULL,(char *)(SWIGTYPE_p_wxGraphicsPath->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxGraphicsPath,&le_swig__p_wxGraphicsPath);
le_swig__p_wxCursor=zend_register_list_destructors_ex(_wrap_destroy_p_wxCursor,NULL,(char *)(SWIGTYPE_p_wxCursor->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxCursor,&le_swig__p_wxCursor);
le_swig__p_wxHitTest=zend_register_list_destructors_ex(_wrap_destroy_p_wxHitTest,NULL,(char *)(SWIGTYPE_p_wxHitTest->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxHitTest,&le_swig__p_wxHitTest);
le_swig__p_wxIcon=zend_register_list_destructors_ex(_wrap_destroy_p_wxIcon,NULL,(char *)(SWIGTYPE_p_wxIcon->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxIcon,&le_swig__p_wxIcon);
le_swig__p_wxHelpEvent__Origin=zend_register_list_destructors_ex(_wrap_destroy_p_wxHelpEvent__Origin,NULL,(char *)(SWIGTYPE_p_wxHelpEvent__Origin->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxHelpEvent__Origin,&le_swig__p_wxHelpEvent__Origin);
le_swig__p_wxRegion=zend_register_list_destructors_ex(_wrap_destroy_p_wxRegion,NULL,(char *)(SWIGTYPE_p_wxRegion->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxRegion,&le_swig__p_wxRegion);
le_swig__p_wxEventLoopBase=zend_register_list_destructors_ex(_wrap_destroy_p_wxEventLoopBase,NULL,(char *)(SWIGTYPE_p_wxEventLoopBase->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxEventLoopBase,&le_swig__p_wxEventLoopBase);
le_swig__p_wxFrame=zend_register_list_destructors_ex(_wrap_destroy_p_wxFrame,NULL,(char *)(SWIGTYPE_p_wxFrame->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxFrame,&le_swig__p_wxFrame);
le_swig__p_wxAppConsole=zend_register_list_destructors_ex(_wrap_destroy_p_wxAppConsole,NULL,(char *)(SWIGTYPE_p_wxAppConsole->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxAppConsole,&le_swig__p_wxAppConsole);
le_swig__p_wxMenu=zend_register_list_destructors_ex(_wrap_destroy_p_wxMenu,NULL,(char *)(SWIGTYPE_p_wxMenu->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxMenu,&le_swig__p_wxMenu);
le_swig__p_wxEventFunction=zend_register_list_destructors_ex(_wrap_destroy_p_wxEventFunction,NULL,(char *)(SWIGTYPE_p_wxEventFunction->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxEventFunction,&le_swig__p_wxEventFunction);
le_swig__p_int=zend_register_list_destructors_ex(_wrap_destroy_p_int,NULL,(char *)(SWIGTYPE_p_int->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_int,&le_swig__p_int);
le_swig__p_wxKeyEvent=zend_register_list_destructors_ex(_wrap_destroy_p_wxKeyEvent,NULL,(char *)(SWIGTYPE_p_wxKeyEvent->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxKeyEvent,&le_swig__p_wxKeyEvent);
le_swig__p_wxBorder=zend_register_list_destructors_ex(_wrap_destroy_p_wxBorder,NULL,(char *)(SWIGTYPE_p_wxBorder->name),module_number);
SWIG_TypeClientData(SWIGTYPE_p_wxBorder,&le_swig__p_wxBorder);
CG(active_class_entry) = NULL;
/* end oinit subsection */

/* cinit subsection */
{
  zval *z_var;
  MAKE_STD_ZVAL(z_var);
  SWIG_SetPointerZval(z_var, (void*)wxTheApp, SWIGTYPE_p_wxApp, 0);
  zend_constant c;
  c.value = *z_var;
  zval_copy_ctor(&c.value);
  size_t len = sizeof("wxTheApp") - 1;
  c.name = zend_strndup("wxTheApp", len);
  c.name_len = len+1;
  c.flags = CONST_CS | CONST_PERSISTENT;
  c.module_number = module_number;
  zend_register_constant( &c TSRMLS_CC );
}
SWIG_LONG_CONSTANT(wxSHOW_EFFECT_NONE, wxSHOW_EFFECT_NONE);
SWIG_LONG_CONSTANT(wxSHOW_EFFECT_ROLL_TO_LEFT, wxSHOW_EFFECT_ROLL_TO_LEFT);
SWIG_LONG_CONSTANT(wxSHOW_EFFECT_ROLL_TO_RIGHT, wxSHOW_EFFECT_ROLL_TO_RIGHT);
SWIG_LONG_CONSTANT(wxSHOW_EFFECT_ROLL_TO_TOP, wxSHOW_EFFECT_ROLL_TO_TOP);
SWIG_LONG_CONSTANT(wxSHOW_EFFECT_ROLL_TO_BOTTOM, wxSHOW_EFFECT_ROLL_TO_BOTTOM);
SWIG_LONG_CONSTANT(wxSHOW_EFFECT_SLIDE_TO_LEFT, wxSHOW_EFFECT_SLIDE_TO_LEFT);
SWIG_LONG_CONSTANT(wxSHOW_EFFECT_SLIDE_TO_RIGHT, wxSHOW_EFFECT_SLIDE_TO_RIGHT);
SWIG_LONG_CONSTANT(wxSHOW_EFFECT_SLIDE_TO_TOP, wxSHOW_EFFECT_SLIDE_TO_TOP);
SWIG_LONG_CONSTANT(wxSHOW_EFFECT_SLIDE_TO_BOTTOM, wxSHOW_EFFECT_SLIDE_TO_BOTTOM);
SWIG_LONG_CONSTANT(wxSHOW_EFFECT_BLEND, wxSHOW_EFFECT_BLEND);
SWIG_LONG_CONSTANT(wxSHOW_EFFECT_EXPAND, wxSHOW_EFFECT_EXPAND);
SWIG_LONG_CONSTANT(wxWINDOW_VARIANT_NORMAL, wxWINDOW_VARIANT_NORMAL);
SWIG_LONG_CONSTANT(wxWINDOW_VARIANT_SMALL, wxWINDOW_VARIANT_SMALL);
SWIG_LONG_CONSTANT(wxWINDOW_VARIANT_MINI, wxWINDOW_VARIANT_MINI);
SWIG_LONG_CONSTANT(wxWINDOW_VARIANT_LARGE, wxWINDOW_VARIANT_LARGE);
SWIG_LONG_CONSTANT(wxWINDOW_VARIANT_MAX, wxWINDOW_VARIANT_MAX);
SWIG_LONG_CONSTANT(wxUSER_ATTENTION_INFO, wxUSER_ATTENTION_INFO);
SWIG_LONG_CONSTANT(wxUSER_ATTENTION_ERROR, wxUSER_ATTENTION_ERROR);
SWIG_LONG_CONSTANT(wxFULLSCREEN_NOMENUBAR, wxFULLSCREEN_NOMENUBAR);
SWIG_LONG_CONSTANT(wxFULLSCREEN_NOTOOLBAR, wxFULLSCREEN_NOTOOLBAR);
SWIG_LONG_CONSTANT(wxFULLSCREEN_NOSTATUSBAR, wxFULLSCREEN_NOSTATUSBAR);
SWIG_LONG_CONSTANT(wxFULLSCREEN_NOBORDER, wxFULLSCREEN_NOBORDER);
SWIG_LONG_CONSTANT(wxFULLSCREEN_NOCAPTION, wxFULLSCREEN_NOCAPTION);
SWIG_LONG_CONSTANT(wxFULLSCREEN_ALL, wxFULLSCREEN_ALL);
SWIG_LONG_CONSTANT(wxFRAME_NO_TASKBAR, 0x0002);
SWIG_LONG_CONSTANT(wxFRAME_TOOL_WINDOW, 0x0004);
SWIG_LONG_CONSTANT(wxFRAME_FLOAT_ON_PARENT, 0x0008);
/* end cinit subsection */

    return SUCCESS;
}

PHP_RINIT_FUNCTION(wxwidgets)
{
/* rinit section */

/* vinit subsection */
/* end vinit subsection */

    return SUCCESS;
}

PHP_MSHUTDOWN_FUNCTION(wxwidgets)
{
/* shutdown section */

    //wxUninitialize();

#ifdef ZTS
    ts_free_id(wxwidgets_globals_id);
#endif
    return SUCCESS;
}

PHP_RSHUTDOWN_FUNCTION(wxwidgets)
{
/* rshutdown section */

    return SUCCESS;
}

PHP_MINFO_FUNCTION(wxwidgets)
{
}
/* end init section */
